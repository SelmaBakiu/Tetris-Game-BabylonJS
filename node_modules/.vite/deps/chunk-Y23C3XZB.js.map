{
  "version": 3,
  "sources": ["../../../dev/core/src/Misc/performanceMonitor.ts", "../../../dev/core/src/Engines/Extensions/engine.readTexture.ts", "../../../dev/core/src/Engines/Extensions/engine.alpha.ts", "../../../dev/core/src/Engines/Extensions/engine.dynamicBuffer.ts", "../../../dev/core/src/Engines/engine.ts"],
  "sourcesContent": ["import type { Nullable } from \"../types\";\r\nimport { PrecisionDate } from \"./precisionDate\";\r\n\r\n/**\r\n * Performance monitor tracks rolling average frame-time and frame-time variance over a user defined sliding-window\r\n */\r\nexport class PerformanceMonitor {\r\n    private _enabled: boolean = true;\r\n    private _rollingFrameTime: RollingAverage;\r\n    private _lastFrameTimeMs: Nullable<number>;\r\n\r\n    /**\r\n     * constructor\r\n     * @param frameSampleSize The number of samples required to saturate the sliding window\r\n     */\r\n    constructor(frameSampleSize: number = 30) {\r\n        this._rollingFrameTime = new RollingAverage(frameSampleSize);\r\n    }\r\n\r\n    /**\r\n     * Samples current frame\r\n     * @param timeMs A timestamp in milliseconds of the current frame to compare with other frames\r\n     */\r\n    public sampleFrame(timeMs: number = PrecisionDate.Now) {\r\n        if (!this._enabled) {\r\n            return;\r\n        }\r\n\r\n        if (this._lastFrameTimeMs != null) {\r\n            const dt = timeMs - this._lastFrameTimeMs;\r\n            this._rollingFrameTime.add(dt);\r\n        }\r\n\r\n        this._lastFrameTimeMs = timeMs;\r\n    }\r\n\r\n    /**\r\n     * Returns the average frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFrameTime(): number {\r\n        return this._rollingFrameTime.average;\r\n    }\r\n\r\n    /**\r\n     * Returns the variance frame time in milliseconds over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFrameTimeVariance(): number {\r\n        return this._rollingFrameTime.variance;\r\n    }\r\n\r\n    /**\r\n     * Returns the frame time of the most recent frame\r\n     */\r\n    public get instantaneousFrameTime(): number {\r\n        return this._rollingFrameTime.history(0);\r\n    }\r\n\r\n    /**\r\n     * Returns the average framerate in frames per second over the sliding window (or the subset of frames sampled so far)\r\n     */\r\n    public get averageFPS(): number {\r\n        return 1000.0 / this._rollingFrameTime.average;\r\n    }\r\n\r\n    /**\r\n     * Returns the average framerate in frames per second using the most recent frame time\r\n     */\r\n    public get instantaneousFPS(): number {\r\n        const history = this._rollingFrameTime.history(0);\r\n\r\n        if (history === 0) {\r\n            return 0;\r\n        }\r\n\r\n        return 1000.0 / history;\r\n    }\r\n\r\n    /**\r\n     * Returns true if enough samples have been taken to completely fill the sliding window\r\n     */\r\n    public get isSaturated(): boolean {\r\n        return this._rollingFrameTime.isSaturated();\r\n    }\r\n\r\n    /**\r\n     * Enables contributions to the sliding window sample set\r\n     */\r\n    public enable() {\r\n        this._enabled = true;\r\n    }\r\n\r\n    /**\r\n     * Disables contributions to the sliding window sample set\r\n     * Samples will not be interpolated over the disabled period\r\n     */\r\n    public disable() {\r\n        this._enabled = false;\r\n        //clear last sample to avoid interpolating over the disabled period when next enabled\r\n        this._lastFrameTimeMs = null;\r\n    }\r\n\r\n    /**\r\n     * Returns true if sampling is enabled\r\n     */\r\n    public get isEnabled(): boolean {\r\n        return this._enabled;\r\n    }\r\n\r\n    /**\r\n     * Resets performance monitor\r\n     */\r\n    public reset() {\r\n        //clear last sample to avoid interpolating over the disabled period when next enabled\r\n        this._lastFrameTimeMs = null;\r\n        //wipe record\r\n        this._rollingFrameTime.reset();\r\n    }\r\n}\r\n\r\n/**\r\n * RollingAverage\r\n *\r\n * Utility to efficiently compute the rolling average and variance over a sliding window of samples\r\n */\r\nexport class RollingAverage {\r\n    /**\r\n     * Current average\r\n     */\r\n    public average: number;\r\n    /**\r\n     * Current variance\r\n     */\r\n    public variance: number;\r\n\r\n    protected _samples: Array<number>;\r\n    protected _sampleCount: number;\r\n    protected _pos: number;\r\n    protected _m2: number; //sum of squares of differences from the (current) mean\r\n\r\n    /**\r\n     * constructor\r\n     * @param length The number of samples required to saturate the sliding window\r\n     */\r\n    constructor(length: number) {\r\n        this._samples = new Array<number>(length);\r\n        this.reset();\r\n    }\r\n\r\n    /**\r\n     * Adds a sample to the sample set\r\n     * @param v The sample value\r\n     */\r\n    public add(v: number) {\r\n        //http://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\r\n        let delta: number;\r\n\r\n        //we need to check if we've already wrapped round\r\n        if (this.isSaturated()) {\r\n            //remove bottom of stack from mean\r\n            const bottomValue = this._samples[this._pos];\r\n            delta = bottomValue - this.average;\r\n            this.average -= delta / (this._sampleCount - 1);\r\n            this._m2 -= delta * (bottomValue - this.average);\r\n        } else {\r\n            this._sampleCount++;\r\n        }\r\n\r\n        //add new value to mean\r\n        delta = v - this.average;\r\n        this.average += delta / this._sampleCount;\r\n        this._m2 += delta * (v - this.average);\r\n\r\n        //set the new variance\r\n        this.variance = this._m2 / (this._sampleCount - 1);\r\n\r\n        this._samples[this._pos] = v;\r\n        this._pos++;\r\n\r\n        this._pos %= this._samples.length; //positive wrap around\r\n    }\r\n\r\n    /**\r\n     * Returns previously added values or null if outside of history or outside the sliding window domain\r\n     * @param i Index in history. For example, pass 0 for the most recent value and 1 for the value before that\r\n     * @returns Value previously recorded with add() or null if outside of range\r\n     */\r\n    public history(i: number): number {\r\n        if (i >= this._sampleCount || i >= this._samples.length) {\r\n            return 0;\r\n        }\r\n\r\n        const i0 = this._wrapPosition(this._pos - 1.0);\r\n        return this._samples[this._wrapPosition(i0 - i)];\r\n    }\r\n\r\n    /**\r\n     * Returns true if enough samples have been taken to completely fill the sliding window\r\n     * @returns true if sample-set saturated\r\n     */\r\n    public isSaturated(): boolean {\r\n        return this._sampleCount >= this._samples.length;\r\n    }\r\n\r\n    /**\r\n     * Resets the rolling average (equivalent to 0 samples taken so far)\r\n     */\r\n    public reset() {\r\n        this.average = 0;\r\n        this.variance = 0;\r\n        this._sampleCount = 0;\r\n        this._pos = 0;\r\n        this._m2 = 0;\r\n    }\r\n\r\n    /**\r\n     * Wraps a value around the sample range boundaries\r\n     * @param i Position in sample range, for example if the sample length is 5, and i is -3, then 2 will be returned.\r\n     * @returns Wrapped position in sample range\r\n     */\r\n    protected _wrapPosition(i: number): number {\r\n        const max = this._samples.length;\r\n        return ((i % max) + max) % max;\r\n    }\r\n}\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { InternalTexture } from \"../../Materials/Textures/internalTexture\";\r\nimport type { Nullable } from \"../../types\";\r\nimport { Constants } from \"../constants\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /** @internal */\r\n        _readTexturePixels(\r\n            texture: InternalTexture,\r\n            width: number,\r\n            height: number,\r\n            faceIndex?: number,\r\n            level?: number,\r\n            buffer?: Nullable<ArrayBufferView>,\r\n            flushRenderer?: boolean,\r\n            noDataConversion?: boolean,\r\n            x?: number,\r\n            y?: number\r\n        ): Promise<ArrayBufferView>;\r\n\r\n        /** @internal */\r\n        _readTexturePixelsSync(\r\n            texture: InternalTexture,\r\n            width: number,\r\n            height: number,\r\n            faceIndex?: number,\r\n            level?: number,\r\n            buffer?: Nullable<ArrayBufferView>,\r\n            flushRenderer?: boolean,\r\n            noDataConversion?: boolean,\r\n            x?: number,\r\n            y?: number\r\n        ): ArrayBufferView;\r\n    }\r\n}\r\n\r\n/**\r\n * Allocate a typed array depending on a texture type. Optionally can copy existing data in the buffer.\r\n * @param type type of the texture\r\n * @param sizeOrDstBuffer size of the array OR an existing buffer that will be used as the destination of the copy (if copyBuffer is provided)\r\n * @param sizeInBytes true if the size of the array is given in bytes, false if it is the number of elements of the array\r\n * @param copyBuffer if provided, buffer to copy into the destination buffer (either a newly allocated buffer if sizeOrDstBuffer is a number or use sizeOrDstBuffer as the destination buffer otherwise)\r\n * @returns the allocated buffer or sizeOrDstBuffer if the latter is an ArrayBuffer\r\n */\r\nexport function allocateAndCopyTypedBuffer(type: number, sizeOrDstBuffer: number | ArrayBuffer, sizeInBytes = false, copyBuffer?: ArrayBuffer): ArrayBufferView {\r\n    switch (type) {\r\n        case Constants.TEXTURETYPE_BYTE: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Int8Array(sizeOrDstBuffer) : new Int8Array(sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Int8Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_UNSIGNED_BYTE: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint8Array(sizeOrDstBuffer) : new Uint8Array(sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Uint8Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_SHORT: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Int16Array(sizeOrDstBuffer) : new Int16Array(sizeInBytes ? sizeOrDstBuffer / 2 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Int16Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_UNSIGNED_SHORT:\r\n        case Constants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4:\r\n        case Constants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1:\r\n        case Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5:\r\n        case Constants.TEXTURETYPE_HALF_FLOAT: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint16Array(sizeOrDstBuffer) : new Uint16Array(sizeInBytes ? sizeOrDstBuffer / 2 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Uint16Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_INT: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Int32Array(sizeOrDstBuffer) : new Int32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Int32Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_UNSIGNED_INTEGER:\r\n        case Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV:\r\n        case Constants.TEXTURETYPE_UNSIGNED_INT_24_8:\r\n        case Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV:\r\n        case Constants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV:\r\n        case Constants.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint32Array(sizeOrDstBuffer) : new Uint32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Uint32Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n        case Constants.TEXTURETYPE_FLOAT: {\r\n            const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Float32Array(sizeOrDstBuffer) : new Float32Array(sizeInBytes ? sizeOrDstBuffer / 4 : sizeOrDstBuffer);\r\n            if (copyBuffer) {\r\n                buffer.set(new Float32Array(copyBuffer));\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    const buffer = sizeOrDstBuffer instanceof ArrayBuffer ? new Uint8Array(sizeOrDstBuffer) : new Uint8Array(sizeOrDstBuffer);\r\n    if (copyBuffer) {\r\n        buffer.set(new Uint8Array(copyBuffer));\r\n    }\r\n    return buffer;\r\n}\r\n\r\nThinEngine.prototype._readTexturePixelsSync = function (\r\n    texture: InternalTexture,\r\n    width: number,\r\n    height: number,\r\n    faceIndex = -1,\r\n    level = 0,\r\n    buffer: Nullable<ArrayBufferView> = null,\r\n    flushRenderer = true,\r\n    noDataConversion = false,\r\n    x = 0,\r\n    y = 0\r\n): ArrayBufferView {\r\n    const gl = this._gl;\r\n    if (!gl) {\r\n        throw new Error(\"Engine does not have gl rendering context.\");\r\n    }\r\n    if (!this._dummyFramebuffer) {\r\n        const dummy = gl.createFramebuffer();\r\n\r\n        if (!dummy) {\r\n            throw new Error(\"Unable to create dummy framebuffer\");\r\n        }\r\n\r\n        this._dummyFramebuffer = dummy;\r\n    }\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._dummyFramebuffer);\r\n\r\n    if (faceIndex > -1) {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex, texture._hardwareTexture?.underlyingResource, level);\r\n    } else {\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture._hardwareTexture?.underlyingResource, level);\r\n    }\r\n\r\n    let readType = texture.type !== undefined ? this._getWebGLTextureType(texture.type) : gl.UNSIGNED_BYTE;\r\n\r\n    if (!noDataConversion) {\r\n        switch (readType) {\r\n            case gl.UNSIGNED_BYTE:\r\n                if (!buffer) {\r\n                    buffer = new Uint8Array(4 * width * height);\r\n                }\r\n                readType = gl.UNSIGNED_BYTE;\r\n                break;\r\n            default:\r\n                if (!buffer) {\r\n                    buffer = new Float32Array(4 * width * height);\r\n                }\r\n                readType = gl.FLOAT;\r\n                break;\r\n        }\r\n    } else if (!buffer) {\r\n        buffer = allocateAndCopyTypedBuffer(texture.type, 4 * width * height);\r\n    }\r\n\r\n    if (flushRenderer) {\r\n        this.flushFramebuffer();\r\n    }\r\n\r\n    gl.readPixels(x, y, width, height, gl.RGBA, readType, <DataView>buffer);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this._currentFramebuffer);\r\n\r\n    return buffer;\r\n};\r\n\r\nThinEngine.prototype._readTexturePixels = function (\r\n    texture: InternalTexture,\r\n    width: number,\r\n    height: number,\r\n    faceIndex = -1,\r\n    level = 0,\r\n    buffer: Nullable<ArrayBufferView> = null,\r\n    flushRenderer = true,\r\n    noDataConversion = false,\r\n    x = 0,\r\n    y = 0\r\n): Promise<ArrayBufferView> {\r\n    return Promise.resolve(this._readTexturePixelsSync(texture, width, height, faceIndex, level, buffer, flushRenderer, noDataConversion, x, y));\r\n};\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport { Constants } from \"../constants\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Sets alpha constants used by some alpha blending modes\r\n         * @param r defines the red component\r\n         * @param g defines the green component\r\n         * @param b defines the blue component\r\n         * @param a defines the alpha component\r\n         */\r\n        setAlphaConstants(r: number, g: number, b: number, a: number): void;\r\n\r\n        /**\r\n         * Sets the current alpha mode\r\n         * @param mode defines the mode to use (one of the Engine.ALPHA_XXX)\r\n         * @param noDepthWriteChange defines if depth writing state should remains unchanged (false by default)\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering\r\n         */\r\n        setAlphaMode(mode: number, noDepthWriteChange?: boolean): void;\r\n\r\n        /**\r\n         * Gets the current alpha mode\r\n         * @see https://doc.babylonjs.com/features/featuresDeepDive/materials/advanced/transparent_rendering\r\n         * @returns the current alpha mode\r\n         */\r\n        getAlphaMode(): number;\r\n\r\n        /**\r\n         * Sets the current alpha equation\r\n         * @param equation defines the equation to use (one of the Engine.ALPHA_EQUATION_XXX)\r\n         */\r\n        setAlphaEquation(equation: number): void;\r\n\r\n        /**\r\n         * Gets the current alpha equation.\r\n         * @returns the current alpha equation\r\n         */\r\n        getAlphaEquation(): number;\r\n    }\r\n}\r\n\r\nThinEngine.prototype.setAlphaConstants = function (r: number, g: number, b: number, a: number) {\r\n    this._alphaState.setAlphaBlendConstants(r, g, b, a);\r\n};\r\n\r\nThinEngine.prototype.setAlphaMode = function (mode: number, noDepthWriteChange: boolean = false): void {\r\n    if (this._alphaMode === mode) {\r\n        if (!noDepthWriteChange) {\r\n            // Make sure we still have the correct depth mask according to the alpha mode (a transparent material could have forced writting to the depth buffer, for instance)\r\n            const depthMask = mode === Constants.ALPHA_DISABLE;\r\n            if (this.depthCullingState.depthMask !== depthMask) {\r\n                this.depthCullingState.depthMask = depthMask;\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    switch (mode) {\r\n        case Constants.ALPHA_DISABLE:\r\n            this._alphaState.alphaBlend = false;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_PREMULTIPLIED_PORTERDUFF:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_COMBINE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ADD:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SUBTRACT:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ZERO, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MULTIPLY:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_COLOR, this._gl.ZERO, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_MAXIMIZED:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_INTERPOLATE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                this._gl.CONSTANT_COLOR,\r\n                this._gl.ONE_MINUS_CONSTANT_COLOR,\r\n                this._gl.CONSTANT_ALPHA,\r\n                this._gl.ONE_MINUS_CONSTANT_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SCREENMODE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEONE:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ALPHATOCOLOR:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.DST_ALPHA, this._gl.ONE, this._gl.ZERO, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_REVERSEONEMINUS:\r\n            this._alphaState.setAlphaBlendFunctionParameters(\r\n                this._gl.ONE_MINUS_DST_COLOR,\r\n                this._gl.ONE_MINUS_SRC_COLOR,\r\n                this._gl.ONE_MINUS_DST_ALPHA,\r\n                this._gl.ONE_MINUS_SRC_ALPHA\r\n            );\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_SRC_DSTONEMINUSSRCALPHA:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_ONEONE_ONEZERO:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE, this._gl.ONE, this._gl.ONE, this._gl.ZERO);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_EXCLUSION:\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.ONE_MINUS_DST_COLOR, this._gl.ONE_MINUS_SRC_COLOR, this._gl.ZERO, this._gl.ONE);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n        case Constants.ALPHA_LAYER_ACCUMULATE:\r\n            // Same as ALPHA_COMBINE but accumulates (1 - alpha) values in the alpha channel for a later readout in order independant transparency\r\n            this._alphaState.setAlphaBlendFunctionParameters(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA, this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA);\r\n            this._alphaState.alphaBlend = true;\r\n            break;\r\n    }\r\n    if (!noDepthWriteChange) {\r\n        this.depthCullingState.depthMask = mode === Constants.ALPHA_DISABLE;\r\n    }\r\n    this._alphaMode = mode;\r\n};\r\n\r\nThinEngine.prototype.getAlphaMode = function (): number {\r\n    return this._alphaMode;\r\n};\r\n\r\nThinEngine.prototype.setAlphaEquation = function (equation: number): void {\r\n    if (this._alphaEquation === equation) {\r\n        return;\r\n    }\r\n\r\n    switch (equation) {\r\n        case Constants.ALPHA_EQUATION_ADD:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_ADD, Constants.GL_ALPHA_EQUATION_ADD);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_SUBSTRACT:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_SUBTRACT, Constants.GL_ALPHA_EQUATION_SUBTRACT);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_REVERSE_SUBTRACT:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT, Constants.GL_ALPHA_EQUATION_REVERSE_SUBTRACT);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_MAX:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MAX, Constants.GL_ALPHA_EQUATION_MAX);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_MIN:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MIN, Constants.GL_ALPHA_EQUATION_MIN);\r\n            break;\r\n        case Constants.ALPHA_EQUATION_DARKEN:\r\n            this._alphaState.setAlphaEquationParameters(Constants.GL_ALPHA_EQUATION_MIN, Constants.GL_ALPHA_EQUATION_ADD);\r\n            break;\r\n    }\r\n    this._alphaEquation = equation;\r\n};\r\n\r\nThinEngine.prototype.getAlphaEquation = function () {\r\n    return this._alphaEquation;\r\n};\r\n", "import { ThinEngine } from \"../../Engines/thinEngine\";\r\nimport type { DataBuffer } from \"../../Buffers/dataBuffer\";\r\nimport type { IndicesArray, DataArray } from \"../../types\";\r\n\r\ndeclare module \"../../Engines/thinEngine\" {\r\n    export interface ThinEngine {\r\n        /**\r\n         * Update a dynamic index buffer\r\n         * @param indexBuffer defines the target index buffer\r\n         * @param indices defines the data to update\r\n         * @param offset defines the offset in the target index buffer where update should start\r\n         */\r\n        updateDynamicIndexBuffer(indexBuffer: DataBuffer, indices: IndicesArray, offset?: number): void;\r\n\r\n        /**\r\n         * Updates a dynamic vertex buffer.\r\n         * @param vertexBuffer the vertex buffer to update\r\n         * @param data the data used to update the vertex buffer\r\n         * @param byteOffset the byte offset of the data\r\n         * @param byteLength the byte length of the data\r\n         */\r\n        updateDynamicVertexBuffer(vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void;\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nThinEngine.prototype.updateDynamicIndexBuffer = function (this: ThinEngine, indexBuffer: DataBuffer, indices: IndicesArray, offset: number = 0): void {\r\n    // Force cache update\r\n    this._currentBoundBuffer[this._gl.ELEMENT_ARRAY_BUFFER] = null;\r\n    this.bindIndexBuffer(indexBuffer);\r\n\r\n    let view: ArrayBufferView;\r\n    if (indexBuffer.is32Bits) {\r\n        // anything else than Uint32Array needs to be converted to Uint32Array\r\n        view = indices instanceof Uint32Array ? indices : new Uint32Array(indices);\r\n    } else {\r\n        // anything else than Uint16Array needs to be converted to Uint16Array\r\n        view = indices instanceof Uint16Array ? indices : new Uint16Array(indices);\r\n    }\r\n\r\n    this._gl.bufferData(this._gl.ELEMENT_ARRAY_BUFFER, view, this._gl.DYNAMIC_DRAW);\r\n\r\n    this._resetIndexBufferBinding();\r\n};\r\n\r\nThinEngine.prototype.updateDynamicVertexBuffer = function (this: ThinEngine, vertexBuffer: DataBuffer, data: DataArray, byteOffset?: number, byteLength?: number): void {\r\n    this.bindArrayBuffer(vertexBuffer);\r\n\r\n    if (byteOffset === undefined) {\r\n        byteOffset = 0;\r\n    }\r\n\r\n    const dataLength = (data as ArrayBuffer).byteLength || (data as number[]).length;\r\n\r\n    if (byteLength === undefined || (byteLength >= dataLength && byteOffset === 0)) {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, new Float32Array(data));\r\n        } else {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, byteOffset, <ArrayBuffer>data);\r\n        }\r\n    } else {\r\n        if (data instanceof Array) {\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, new Float32Array(data).subarray(byteOffset, byteOffset + byteLength));\r\n        } else {\r\n            if (data instanceof ArrayBuffer) {\r\n                data = new Uint8Array(data, byteOffset, byteLength);\r\n            } else {\r\n                data = new Uint8Array(data.buffer, data.byteOffset + byteOffset, byteLength);\r\n            }\r\n\r\n            this._gl.bufferSubData(this._gl.ARRAY_BUFFER, 0, <ArrayBuffer>data);\r\n        }\r\n    }\r\n\r\n    this._resetVertexBufferBinding();\r\n};\r\n", "import { Observable } from \"../Misc/observable\";\r\nimport type { Nullable } from \"../types\";\r\nimport type { Scene } from \"../scene\";\r\nimport { InternalTexture, InternalTextureSource } from \"../Materials/Textures/internalTexture\";\r\nimport type { IOfflineProvider } from \"../Offline/IOfflineProvider\";\r\nimport type { ILoadingScreen } from \"../Loading/loadingScreen\";\r\nimport { IsDocumentAvailable, IsWindowObjectExist } from \"../Misc/domManagement\";\r\nimport { EngineStore } from \"./engineStore\";\r\nimport { _WarnImport } from \"../Misc/devTools\";\r\nimport type { WebGLPipelineContext } from \"./WebGL/webGLPipelineContext\";\r\nimport type { IPipelineContext } from \"./IPipelineContext\";\r\nimport type { ICustomAnimationFrameRequester } from \"../Misc/customAnimationFrameRequester\";\r\nimport type { EngineOptions } from \"./thinEngine\";\r\nimport { ThinEngine } from \"./thinEngine\";\r\nimport { Constants } from \"./constants\";\r\nimport type { IViewportLike, IColor4Like } from \"../Maths/math.like\";\r\nimport type { RenderTargetTexture } from \"../Materials/Textures/renderTargetTexture\";\r\nimport { PerformanceMonitor } from \"../Misc/performanceMonitor\";\r\nimport type { DataBuffer } from \"../Buffers/dataBuffer\";\r\nimport { PerfCounter } from \"../Misc/perfCounter\";\r\nimport { WebGLDataBuffer } from \"../Meshes/WebGL/webGLDataBuffer\";\r\nimport { Logger } from \"../Misc/logger\";\r\nimport type { RenderTargetWrapper } from \"./renderTargetWrapper\";\r\nimport { WebGLHardwareTexture } from \"./WebGL/webGLHardwareTexture\";\r\n\r\nimport \"./Extensions/engine.alpha\";\r\nimport \"./Extensions/engine.readTexture\";\r\nimport \"./Extensions/engine.dynamicBuffer\";\r\nimport type { IAudioEngine } from \"../Audio/Interfaces/IAudioEngine\";\r\n\r\nimport type { Material } from \"../Materials/material\";\r\nimport type { PostProcess } from \"../PostProcesses/postProcess\";\r\n\r\n/**\r\n * Defines the interface used by display changed events\r\n */\r\nexport interface IDisplayChangedEventArgs {\r\n    /** Gets the vrDisplay object (if any) */\r\n    vrDisplay: Nullable<any>;\r\n    /** Gets a boolean indicating if webVR is supported */\r\n    vrSupported: boolean;\r\n}\r\n\r\n/**\r\n * Defines the interface used by objects containing a viewport (like a camera)\r\n */\r\ninterface IViewportOwnerLike {\r\n    /**\r\n     * Gets or sets the viewport\r\n     */\r\n    viewport: IViewportLike;\r\n}\r\n\r\n/**\r\n * The engine class is responsible for interfacing with all lower-level APIs such as WebGL and Audio\r\n */\r\nexport class Engine extends ThinEngine {\r\n    // Const statics\r\n\r\n    /** Defines that alpha blending is disabled */\r\n    public static readonly ALPHA_DISABLE = Constants.ALPHA_DISABLE;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + DEST */\r\n    public static readonly ALPHA_ADD = Constants.ALPHA_ADD;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_COMBINE = Constants.ALPHA_COMBINE;\r\n    /** Defines that alpha blending to DEST - SRC * DEST */\r\n    public static readonly ALPHA_SUBTRACT = Constants.ALPHA_SUBTRACT;\r\n    /** Defines that alpha blending to SRC * DEST */\r\n    public static readonly ALPHA_MULTIPLY = Constants.ALPHA_MULTIPLY;\r\n    /** Defines that alpha blending to SRC ALPHA * SRC + (1 - SRC) * DEST */\r\n    public static readonly ALPHA_MAXIMIZED = Constants.ALPHA_MAXIMIZED;\r\n    /** Defines that alpha blending to SRC + DEST */\r\n    public static readonly ALPHA_ONEONE = Constants.ALPHA_ONEONE;\r\n    /** Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST */\r\n    public static readonly ALPHA_PREMULTIPLIED = Constants.ALPHA_PREMULTIPLIED;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC ALPHA) * DEST\r\n     * Alpha will be set to (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_PREMULTIPLIED_PORTERDUFF = Constants.ALPHA_PREMULTIPLIED_PORTERDUFF;\r\n    /** Defines that alpha blending to CST * SRC + (1 - CST) * DEST */\r\n    public static readonly ALPHA_INTERPOLATE = Constants.ALPHA_INTERPOLATE;\r\n    /**\r\n     * Defines that alpha blending to SRC + (1 - SRC) * DEST\r\n     * Alpha will be set to SRC ALPHA + (1 - SRC ALPHA) * DEST ALPHA\r\n     */\r\n    public static readonly ALPHA_SCREENMODE = Constants.ALPHA_SCREENMODE;\r\n\r\n    /** Defines that the resource is not delayed*/\r\n    public static readonly DELAYLOADSTATE_NONE = Constants.DELAYLOADSTATE_NONE;\r\n    /** Defines that the resource was successfully delay loaded */\r\n    public static readonly DELAYLOADSTATE_LOADED = Constants.DELAYLOADSTATE_LOADED;\r\n    /** Defines that the resource is currently delay loading */\r\n    public static readonly DELAYLOADSTATE_LOADING = Constants.DELAYLOADSTATE_LOADING;\r\n    /** Defines that the resource is delayed and has not started loading */\r\n    public static readonly DELAYLOADSTATE_NOTLOADED = Constants.DELAYLOADSTATE_NOTLOADED;\r\n\r\n    // Depht or Stencil test Constants.\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will never pass. i.e. Nothing will be drawn */\r\n    public static readonly NEVER = Constants.NEVER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will always pass. i.e. Pixels will be drawn in the order they are drawn */\r\n    public static readonly ALWAYS = Constants.ALWAYS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than the stored value */\r\n    public static readonly LESS = Constants.LESS;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is equals to the stored value */\r\n    public static readonly EQUAL = Constants.EQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is less than or equal to the stored value */\r\n    public static readonly LEQUAL = Constants.LEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than the stored value */\r\n    public static readonly GREATER = Constants.GREATER;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is greater than or equal to the stored value */\r\n    public static readonly GEQUAL = Constants.GEQUAL;\r\n    /** Passed to depthFunction or stencilFunction to specify depth or stencil tests will pass if the new depth value is not equal to the stored value */\r\n    public static readonly NOTEQUAL = Constants.NOTEQUAL;\r\n\r\n    // Stencil Actions Constants.\r\n    /** Passed to stencilOperation to specify that stencil value must be kept */\r\n    public static readonly KEEP = Constants.KEEP;\r\n    /** Passed to stencilOperation to specify that stencil value must be replaced */\r\n    public static readonly REPLACE = Constants.REPLACE;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented */\r\n    public static readonly INCR = Constants.INCR;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented */\r\n    public static readonly DECR = Constants.DECR;\r\n    /** Passed to stencilOperation to specify that stencil value must be inverted */\r\n    public static readonly INVERT = Constants.INVERT;\r\n    /** Passed to stencilOperation to specify that stencil value must be incremented with wrapping */\r\n    public static readonly INCR_WRAP = Constants.INCR_WRAP;\r\n    /** Passed to stencilOperation to specify that stencil value must be decremented with wrapping */\r\n    public static readonly DECR_WRAP = Constants.DECR_WRAP;\r\n\r\n    /** Texture is not repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_CLAMP_ADDRESSMODE = Constants.TEXTURE_CLAMP_ADDRESSMODE;\r\n    /** Texture is repeating outside of 0..1 UVs */\r\n    public static readonly TEXTURE_WRAP_ADDRESSMODE = Constants.TEXTURE_WRAP_ADDRESSMODE;\r\n    /** Texture is repeating and mirrored */\r\n    public static readonly TEXTURE_MIRROR_ADDRESSMODE = Constants.TEXTURE_MIRROR_ADDRESSMODE;\r\n\r\n    /** ALPHA */\r\n    public static readonly TEXTUREFORMAT_ALPHA = Constants.TEXTUREFORMAT_ALPHA;\r\n    /** LUMINANCE */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE = Constants.TEXTUREFORMAT_LUMINANCE;\r\n    /** LUMINANCE_ALPHA */\r\n    public static readonly TEXTUREFORMAT_LUMINANCE_ALPHA = Constants.TEXTUREFORMAT_LUMINANCE_ALPHA;\r\n    /** RGB */\r\n    public static readonly TEXTUREFORMAT_RGB = Constants.TEXTUREFORMAT_RGB;\r\n    /** RGBA */\r\n    public static readonly TEXTUREFORMAT_RGBA = Constants.TEXTUREFORMAT_RGBA;\r\n    /** RED */\r\n    public static readonly TEXTUREFORMAT_RED = Constants.TEXTUREFORMAT_RED;\r\n    /** RED (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R = Constants.TEXTUREFORMAT_R;\r\n    /** RG */\r\n    public static readonly TEXTUREFORMAT_RG = Constants.TEXTUREFORMAT_RG;\r\n    /** RED_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RED_INTEGER = Constants.TEXTUREFORMAT_RED_INTEGER;\r\n    /** RED_INTEGER (2nd reference) */\r\n    public static readonly TEXTUREFORMAT_R_INTEGER = Constants.TEXTUREFORMAT_R_INTEGER;\r\n    /** RG_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RG_INTEGER = Constants.TEXTUREFORMAT_RG_INTEGER;\r\n    /** RGB_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGB_INTEGER = Constants.TEXTUREFORMAT_RGB_INTEGER;\r\n    /** RGBA_INTEGER */\r\n    public static readonly TEXTUREFORMAT_RGBA_INTEGER = Constants.TEXTUREFORMAT_RGBA_INTEGER;\r\n\r\n    /** UNSIGNED_BYTE */\r\n    public static readonly TEXTURETYPE_UNSIGNED_BYTE = Constants.TEXTURETYPE_UNSIGNED_BYTE;\r\n    /** UNSIGNED_BYTE (2nd reference) */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT = Constants.TEXTURETYPE_UNSIGNED_INT;\r\n    /** FLOAT */\r\n    public static readonly TEXTURETYPE_FLOAT = Constants.TEXTURETYPE_FLOAT;\r\n    /** HALF_FLOAT */\r\n    public static readonly TEXTURETYPE_HALF_FLOAT = Constants.TEXTURETYPE_HALF_FLOAT;\r\n    /** BYTE */\r\n    public static readonly TEXTURETYPE_BYTE = Constants.TEXTURETYPE_BYTE;\r\n    /** SHORT */\r\n    public static readonly TEXTURETYPE_SHORT = Constants.TEXTURETYPE_SHORT;\r\n    /** UNSIGNED_SHORT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT = Constants.TEXTURETYPE_UNSIGNED_SHORT;\r\n    /** INT */\r\n    public static readonly TEXTURETYPE_INT = Constants.TEXTURETYPE_INT;\r\n    /** UNSIGNED_INT */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INTEGER = Constants.TEXTURETYPE_UNSIGNED_INTEGER;\r\n    /** UNSIGNED_SHORT_4_4_4_4 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4 = Constants.TEXTURETYPE_UNSIGNED_SHORT_4_4_4_4;\r\n    /** UNSIGNED_SHORT_5_5_5_1 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_5_5_1;\r\n    /** UNSIGNED_SHORT_5_6_5 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_SHORT_5_6_5 = Constants.TEXTURETYPE_UNSIGNED_SHORT_5_6_5;\r\n    /** UNSIGNED_INT_2_10_10_10_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV = Constants.TEXTURETYPE_UNSIGNED_INT_2_10_10_10_REV;\r\n    /** UNSIGNED_INT_24_8 */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_24_8 = Constants.TEXTURETYPE_UNSIGNED_INT_24_8;\r\n    /** UNSIGNED_INT_10F_11F_11F_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV = Constants.TEXTURETYPE_UNSIGNED_INT_10F_11F_11F_REV;\r\n    /** UNSIGNED_INT_5_9_9_9_REV */\r\n    public static readonly TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV = Constants.TEXTURETYPE_UNSIGNED_INT_5_9_9_9_REV;\r\n    /** FLOAT_32_UNSIGNED_INT_24_8_REV */\r\n    public static readonly TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV = Constants.TEXTURETYPE_FLOAT_32_UNSIGNED_INT_24_8_REV;\r\n\r\n    /** nearest is mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_SAMPLINGMODE = Constants.TEXTURE_NEAREST_SAMPLINGMODE;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_BILINEAR_SAMPLINGMODE = Constants.TEXTURE_BILINEAR_SAMPLINGMODE;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_TRILINEAR_SAMPLINGMODE = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE;\r\n    /** nearest is mag = nearest and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPLINEAR = Constants.TEXTURE_NEAREST_NEAREST_MIPLINEAR;\r\n    /** Bilinear is mag = linear and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPNEAREST = Constants.TEXTURE_LINEAR_LINEAR_MIPNEAREST;\r\n    /** Trilinear is mag = linear and min = linear and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_LINEAR_MIPLINEAR = Constants.TEXTURE_LINEAR_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_NEAREST_MIPNEAREST = Constants.TEXTURE_NEAREST_NEAREST_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = nearest */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPNEAREST = Constants.TEXTURE_NEAREST_LINEAR_MIPNEAREST;\r\n    /** mag = nearest and min = linear and mip = linear */\r\n    public static readonly TEXTURE_NEAREST_LINEAR_MIPLINEAR = Constants.TEXTURE_NEAREST_LINEAR_MIPLINEAR;\r\n    /** mag = nearest and min = linear and mip = none */\r\n    public static readonly TEXTURE_NEAREST_LINEAR = Constants.TEXTURE_NEAREST_LINEAR;\r\n    /** mag = nearest and min = nearest and mip = none */\r\n    public static readonly TEXTURE_NEAREST_NEAREST = Constants.TEXTURE_NEAREST_NEAREST;\r\n    /** mag = linear and min = nearest and mip = nearest */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPNEAREST = Constants.TEXTURE_LINEAR_NEAREST_MIPNEAREST;\r\n    /** mag = linear and min = nearest and mip = linear */\r\n    public static readonly TEXTURE_LINEAR_NEAREST_MIPLINEAR = Constants.TEXTURE_LINEAR_NEAREST_MIPLINEAR;\r\n    /** mag = linear and min = linear and mip = none */\r\n    public static readonly TEXTURE_LINEAR_LINEAR = Constants.TEXTURE_LINEAR_LINEAR;\r\n    /** mag = linear and min = nearest and mip = none */\r\n    public static readonly TEXTURE_LINEAR_NEAREST = Constants.TEXTURE_LINEAR_NEAREST;\r\n\r\n    /** Explicit coordinates mode */\r\n    public static readonly TEXTURE_EXPLICIT_MODE = Constants.TEXTURE_EXPLICIT_MODE;\r\n    /** Spherical coordinates mode */\r\n    public static readonly TEXTURE_SPHERICAL_MODE = Constants.TEXTURE_SPHERICAL_MODE;\r\n    /** Planar coordinates mode */\r\n    public static readonly TEXTURE_PLANAR_MODE = Constants.TEXTURE_PLANAR_MODE;\r\n    /** Cubic coordinates mode */\r\n    public static readonly TEXTURE_CUBIC_MODE = Constants.TEXTURE_CUBIC_MODE;\r\n    /** Projection coordinates mode */\r\n    public static readonly TEXTURE_PROJECTION_MODE = Constants.TEXTURE_PROJECTION_MODE;\r\n    /** Skybox coordinates mode */\r\n    public static readonly TEXTURE_SKYBOX_MODE = Constants.TEXTURE_SKYBOX_MODE;\r\n    /** Inverse Cubic coordinates mode */\r\n    public static readonly TEXTURE_INVCUBIC_MODE = Constants.TEXTURE_INVCUBIC_MODE;\r\n    /** Equirectangular coordinates mode */\r\n    public static readonly TEXTURE_EQUIRECTANGULAR_MODE = Constants.TEXTURE_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MODE;\r\n    /** Equirectangular Fixed Mirrored coordinates mode */\r\n    public static readonly TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE = Constants.TEXTURE_FIXED_EQUIRECTANGULAR_MIRRORED_MODE;\r\n\r\n    // Texture rescaling mode\r\n    /** Defines that texture rescaling will use a floor to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_FLOOR = Constants.SCALEMODE_FLOOR;\r\n    /** Defines that texture rescaling will look for the nearest power of 2 size */\r\n    public static readonly SCALEMODE_NEAREST = Constants.SCALEMODE_NEAREST;\r\n    /** Defines that texture rescaling will use a ceil to find the closer power of 2 size */\r\n    public static readonly SCALEMODE_CEILING = Constants.SCALEMODE_CEILING;\r\n\r\n    /**\r\n     * Returns the current npm package of the sdk\r\n     */\r\n    // Not mixed with Version for tooling purpose.\r\n    public static get NpmPackage(): string {\r\n        return ThinEngine.NpmPackage;\r\n    }\r\n\r\n    /**\r\n     * Returns the current version of the framework\r\n     */\r\n    public static get Version(): string {\r\n        return ThinEngine.Version;\r\n    }\r\n\r\n    /** Gets the list of created engines */\r\n    public static get Instances(): Engine[] {\r\n        return EngineStore.Instances;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created engine\r\n     */\r\n    public static get LastCreatedEngine(): Nullable<Engine> {\r\n        return EngineStore.LastCreatedEngine;\r\n    }\r\n\r\n    /**\r\n     * Gets the latest created scene\r\n     */\r\n    public static get LastCreatedScene(): Nullable<Scene> {\r\n        return EngineStore.LastCreatedScene;\r\n    }\r\n\r\n    /** @internal */\r\n    /**\r\n     * Engine abstraction for loading and creating an image bitmap from a given source string.\r\n     * @param imageSource source to load the image from.\r\n     * @param options An object that sets options for the image's extraction.\r\n     * @returns ImageBitmap.\r\n     */\r\n    public _createImageBitmapFromSource(imageSource: string, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n        const promise = new Promise<ImageBitmap>((resolve, reject) => {\r\n            const image = new Image();\r\n            image.onload = () => {\r\n                image.decode().then(() => {\r\n                    this.createImageBitmap(image, options).then((imageBitmap) => {\r\n                        resolve(imageBitmap);\r\n                    });\r\n                });\r\n            };\r\n            image.onerror = () => {\r\n                reject(`Error loading image ${image.src}`);\r\n            };\r\n\r\n            image.src = imageSource;\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Engine abstraction for createImageBitmap\r\n     * @param image source for image\r\n     * @param options An object that sets options for the image's extraction.\r\n     * @returns ImageBitmap\r\n     */\r\n    public createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap> {\r\n        return createImageBitmap(image, options);\r\n    }\r\n\r\n    /**\r\n     * Resize an image and returns the image data as an uint8array\r\n     * @param image image to resize\r\n     * @param bufferWidth destination buffer width\r\n     * @param bufferHeight destination buffer height\r\n     * @returns an uint8array containing RGBA values of bufferWidth * bufferHeight size\r\n     */\r\n    public resizeImageBitmap(image: HTMLImageElement | ImageBitmap, bufferWidth: number, bufferHeight: number): Uint8Array {\r\n        const canvas = this.createCanvas(bufferWidth, bufferHeight);\r\n        const context = canvas.getContext(\"2d\");\r\n\r\n        if (!context) {\r\n            throw new Error(\"Unable to get 2d context for resizeImageBitmap\");\r\n        }\r\n\r\n        context.drawImage(image, 0, 0);\r\n\r\n        // Create VertexData from map data\r\n        // Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\r\n        const buffer = <Uint8Array>(<any>context.getImageData(0, 0, bufferWidth, bufferHeight).data);\r\n        return buffer;\r\n    }\r\n\r\n    /**\r\n     * Will flag all materials in all scenes in all engines as dirty to trigger new shader compilation\r\n     * @param flag defines which part of the materials must be marked as dirty\r\n     * @param predicate defines a predicate used to filter which materials should be affected\r\n     */\r\n    public static MarkAllMaterialsAsDirty(flag: number, predicate?: (mat: Material) => boolean): void {\r\n        for (let engineIndex = 0; engineIndex < Engine.Instances.length; engineIndex++) {\r\n            const engine = Engine.Instances[engineIndex];\r\n\r\n            for (let sceneIndex = 0; sceneIndex < engine.scenes.length; sceneIndex++) {\r\n                engine.scenes[sceneIndex].markAllMaterialsAsDirty(flag, predicate);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default loading screen.\r\n     * This can be overridden in your own app.\r\n     * @param canvas The rendering canvas element\r\n     * @returns The loading screen\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public static DefaultLoadingScreenFactory(canvas: HTMLCanvasElement): ILoadingScreen {\r\n        throw _WarnImport(\"LoadingScreen\");\r\n    }\r\n\r\n    /**\r\n     * Method called to create the default rescale post process on each engine.\r\n     */\r\n    public static _RescalePostProcessFactory: Nullable<(engine: Engine) => PostProcess> = null;\r\n\r\n    // Members\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable IndexedDB support and avoid XHR on .manifest\r\n     **/\r\n    public enableOfflineSupport = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable checking manifest if IndexedDB support is enabled (js will always consider the database is up to date)\r\n     **/\r\n    public disableManifestCheck = false;\r\n\r\n    /**\r\n     * Gets or sets a boolean to enable/disable the context menu (right-click) from appearing on the main canvas\r\n     */\r\n    public disableContextMenu: boolean = true;\r\n\r\n    /**\r\n     * Gets the list of created scenes\r\n     */\r\n    public scenes = new Array<Scene>();\r\n\r\n    /** @internal */\r\n    public _virtualScenes = new Array<Scene>();\r\n\r\n    /**\r\n     * Event raised when a new scene is created\r\n     */\r\n    public onNewSceneAddedObservable = new Observable<Scene>();\r\n\r\n    /**\r\n     * Gets the list of created postprocesses\r\n     */\r\n    public postProcesses = new Array<PostProcess>();\r\n\r\n    /**\r\n     * Gets a boolean indicating if the pointer is currently locked\r\n     */\r\n    public isPointerLock = false;\r\n\r\n    // Observables\r\n\r\n    /**\r\n     * Observable event triggered each time the rendering canvas is resized\r\n     */\r\n    public onResizeObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas loses focus\r\n     */\r\n    public onCanvasBlurObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas gains focus\r\n     */\r\n    public onCanvasFocusObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable event triggered each time the canvas receives pointerout event\r\n     */\r\n    public onCanvasPointerOutObservable = new Observable<PointerEvent>();\r\n\r\n    /**\r\n     * Observable raised when the engine begins a new frame\r\n     */\r\n    public onBeginFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * If set, will be used to request the next animation frame for the render loop\r\n     */\r\n    public customAnimationFrameRequester: Nullable<ICustomAnimationFrameRequester> = null;\r\n\r\n    /**\r\n     * Observable raised when the engine ends the current frame\r\n     */\r\n    public onEndFrameObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine is about to compile a shader\r\n     */\r\n    public onBeforeShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Observable raised when the engine has just compiled a shader\r\n     */\r\n    public onAfterShaderCompilationObservable = new Observable<Engine>();\r\n\r\n    /**\r\n     * Gets the audio engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/audio/playingSoundsMusic\r\n     * @ignorenaming\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    public static audioEngine: Nullable<IAudioEngine>;\r\n\r\n    /**\r\n     * Default AudioEngine factory responsible of creating the Audio Engine.\r\n     * By default, this will create a BabylonJS Audio Engine if the workload has been embedded.\r\n     */\r\n    public static AudioEngineFactory: (\r\n        hostElement: Nullable<HTMLElement>,\r\n        audioContext: Nullable<AudioContext>,\r\n        audioDestination: Nullable<AudioDestinationNode | MediaStreamAudioDestinationNode>\r\n    ) => IAudioEngine;\r\n\r\n    /**\r\n     * Default offline support factory responsible of creating a tool used to store data locally.\r\n     * By default, this will create a Database object if the workload has been embedded.\r\n     */\r\n    public static OfflineProviderFactory: (urlToScene: string, callbackManifestChecked: (checked: boolean) => any, disableManifestCheck: boolean) => IOfflineProvider;\r\n\r\n    private _loadingScreen: ILoadingScreen;\r\n    private _pointerLockRequested: boolean;\r\n    private _rescalePostProcess: Nullable<PostProcess>;\r\n\r\n    // Deterministic lockstepMaxSteps\r\n    protected _deterministicLockstep: boolean = false;\r\n    protected _lockstepMaxSteps: number = 4;\r\n    protected _timeStep: number = 1 / 60;\r\n\r\n    protected get _supportsHardwareTextureRescaling() {\r\n        return !!Engine._RescalePostProcessFactory;\r\n    }\r\n\r\n    // FPS\r\n    private _fps = 60;\r\n    private _deltaTime = 0;\r\n\r\n    /** @internal */\r\n    public _drawCalls = new PerfCounter();\r\n\r\n    /** Gets or sets the tab index to set to the rendering canvas. 1 is the minimum value to set to be able to capture keyboard events */\r\n    public canvasTabIndex = 1;\r\n\r\n    /**\r\n     * Turn this value on if you want to pause FPS computation when in background\r\n     */\r\n    public disablePerformanceMonitorInBackground = false;\r\n\r\n    private _performanceMonitor = new PerformanceMonitor();\r\n    /**\r\n     * Gets the performance monitor attached to this engine\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/optimize_your_scene#engineinstrumentation\r\n     */\r\n    public get performanceMonitor(): PerformanceMonitor {\r\n        return this._performanceMonitor;\r\n    }\r\n\r\n    // Focus\r\n    private _onFocus: () => void;\r\n    private _onBlur: () => void;\r\n    private _onCanvasPointerOut: (event: PointerEvent) => void;\r\n    private _onCanvasBlur: () => void;\r\n    private _onCanvasFocus: () => void;\r\n    private _onCanvasContextMenu: (evt: Event) => void;\r\n\r\n    private _onFullscreenChange: () => void;\r\n    private _onPointerLockChange: () => void;\r\n\r\n    protected _compatibilityMode = true;\r\n\r\n    /**\r\n     * (WebGPU only) True (default) to be in compatibility mode, meaning rendering all existing scenes without artifacts (same rendering than WebGL).\r\n     * Setting the property to false will improve performances but may not work in some scenes if some precautions are not taken.\r\n     * See https://doc.babylonjs.com/setup/support/webGPU/webGPUOptimization/webGPUNonCompatibilityMode for more details\r\n     */\r\n    public get compatibilityMode() {\r\n        return this._compatibilityMode;\r\n    }\r\n\r\n    public set compatibilityMode(mode: boolean) {\r\n        // not supported in WebGL\r\n        this._compatibilityMode = true;\r\n    }\r\n\r\n    // Events\r\n\r\n    /**\r\n     * Gets the HTML element used to attach event listeners\r\n     * @returns a HTML element\r\n     */\r\n    public getInputElement(): Nullable<HTMLElement> {\r\n        return this._renderingCanvas;\r\n    }\r\n\r\n    /**\r\n     * Creates a new engine\r\n     * @param canvasOrContext defines the canvas or WebGL context to use for rendering. If you provide a WebGL context, Babylon.js will not hook events on the canvas (like pointers, keyboards, etc...) so no event observables will be available. This is mostly used when Babylon.js is used as a plugin on a system which already used the WebGL context\r\n     * @param antialias defines enable antialiasing (default: false)\r\n     * @param options defines further options to be sent to the getContext() function\r\n     * @param adaptToDeviceRatio defines whether to adapt to the device's viewport characteristics (default: false)\r\n     */\r\n    constructor(\r\n        canvasOrContext: Nullable<HTMLCanvasElement | OffscreenCanvas | WebGLRenderingContext | WebGL2RenderingContext>,\r\n        antialias?: boolean,\r\n        options?: EngineOptions,\r\n        adaptToDeviceRatio: boolean = false\r\n    ) {\r\n        super(canvasOrContext, antialias, options, adaptToDeviceRatio);\r\n\r\n        Engine.Instances.push(this);\r\n\r\n        if (!canvasOrContext) {\r\n            return;\r\n        }\r\n\r\n        this._features.supportRenderPasses = true;\r\n\r\n        options = this._creationOptions;\r\n\r\n        if ((<any>canvasOrContext).getContext) {\r\n            const canvas = <HTMLCanvasElement>canvasOrContext;\r\n\r\n            this._sharedInit(canvas);\r\n\r\n            this._connectVREvents();\r\n        }\r\n\r\n        // Load WebVR Devices\r\n        this._prepareVRComponent();\r\n        if (options.autoEnableWebVR) {\r\n            this.initWebVR();\r\n        }\r\n    }\r\n\r\n    protected _initGLContext(): void {\r\n        super._initGLContext();\r\n\r\n        this._rescalePostProcess = null;\r\n    }\r\n\r\n    /**\r\n     * Shared initialization across engines types.\r\n     * @param canvas The canvas associated with this instance of the engine.\r\n     */\r\n    protected _sharedInit(canvas: HTMLCanvasElement) {\r\n        super._sharedInit(canvas);\r\n\r\n        this._onCanvasFocus = () => {\r\n            this.onCanvasFocusObservable.notifyObservers(this);\r\n        };\r\n\r\n        this._onCanvasBlur = () => {\r\n            this.onCanvasBlurObservable.notifyObservers(this);\r\n        };\r\n\r\n        this._onCanvasContextMenu = (evt: Event) => {\r\n            if (this.disableContextMenu) {\r\n                evt.preventDefault();\r\n            }\r\n        };\r\n\r\n        canvas.addEventListener(\"focus\", this._onCanvasFocus);\r\n        canvas.addEventListener(\"blur\", this._onCanvasBlur);\r\n        canvas.addEventListener(\"contextmenu\", this._onCanvasContextMenu);\r\n\r\n        this._onBlur = () => {\r\n            if (this.disablePerformanceMonitorInBackground) {\r\n                this._performanceMonitor.disable();\r\n            }\r\n            this._windowIsBackground = true;\r\n        };\r\n\r\n        this._onFocus = () => {\r\n            if (this.disablePerformanceMonitorInBackground) {\r\n                this._performanceMonitor.enable();\r\n            }\r\n            this._windowIsBackground = false;\r\n        };\r\n\r\n        this._onCanvasPointerOut = (ev) => {\r\n            // Check that the element at the point of the pointer out isn't the canvas and if it isn't, notify observers\r\n            // Note: This is a workaround for a bug with Safari\r\n            if (document.elementFromPoint(ev.clientX, ev.clientY) !== canvas) {\r\n                this.onCanvasPointerOutObservable.notifyObservers(ev);\r\n            }\r\n        };\r\n\r\n        const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\r\n        if (hostWindow && typeof hostWindow.addEventListener === \"function\") {\r\n            hostWindow.addEventListener(\"blur\", this._onBlur);\r\n            hostWindow.addEventListener(\"focus\", this._onFocus);\r\n        }\r\n\r\n        canvas.addEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n\r\n        if (!this._creationOptions.doNotHandleTouchAction) {\r\n            this._disableTouchAction();\r\n        }\r\n\r\n        // Create Audio Engine if needed.\r\n        if (!Engine.audioEngine && this._creationOptions.audioEngine && Engine.AudioEngineFactory) {\r\n            Engine.audioEngine = Engine.AudioEngineFactory(this.getRenderingCanvas(), this.getAudioContext(), this.getAudioDestination());\r\n        }\r\n        if (IsDocumentAvailable()) {\r\n            // Fullscreen\r\n            this._onFullscreenChange = () => {\r\n                this.isFullscreen = !!document.fullscreenElement;\r\n\r\n                // Pointer lock\r\n                if (this.isFullscreen && this._pointerLockRequested && canvas) {\r\n                    Engine._RequestPointerlock(canvas);\r\n                }\r\n            };\r\n\r\n            document.addEventListener(\"fullscreenchange\", this._onFullscreenChange, false);\r\n            document.addEventListener(\"webkitfullscreenchange\", this._onFullscreenChange, false);\r\n\r\n            // Pointer lock\r\n            this._onPointerLockChange = () => {\r\n                this.isPointerLock = document.pointerLockElement === canvas;\r\n            };\r\n\r\n            document.addEventListener(\"pointerlockchange\", this._onPointerLockChange, false);\r\n            document.addEventListener(\"webkitpointerlockchange\", this._onPointerLockChange, false);\r\n        }\r\n\r\n        this.enableOfflineSupport = Engine.OfflineProviderFactory !== undefined;\r\n\r\n        this._deterministicLockstep = !!this._creationOptions.deterministicLockstep;\r\n        this._lockstepMaxSteps = this._creationOptions.lockstepMaxSteps || 0;\r\n        this._timeStep = this._creationOptions.timeStep || 1 / 60;\r\n    }\r\n\r\n    /** @internal */\r\n    public _verifyPointerLock(): void {\r\n        this._onPointerLockChange?.();\r\n    }\r\n\r\n    /**\r\n     * Gets current aspect ratio\r\n     * @param viewportOwner defines the camera to use to get the aspect ratio\r\n     * @param useScreen defines if screen size must be used (or the current render target if any)\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getAspectRatio(viewportOwner: IViewportOwnerLike, useScreen = false): number {\r\n        const viewport = viewportOwner.viewport;\r\n        return (this.getRenderWidth(useScreen) * viewport.width) / (this.getRenderHeight(useScreen) * viewport.height);\r\n    }\r\n\r\n    /**\r\n     * Gets current screen aspect ratio\r\n     * @returns a number defining the aspect ratio\r\n     */\r\n    public getScreenAspectRatio(): number {\r\n        return this.getRenderWidth(true) / this.getRenderHeight(true);\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML canvas attached with the current webGL context\r\n     * @returns a client rectangle\r\n     */\r\n    public getRenderingCanvasClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this._renderingCanvas.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets the client rect of the HTML element used for events\r\n     * @returns a client rectangle\r\n     */\r\n    public getInputElementClientRect(): Nullable<ClientRect> {\r\n        if (!this._renderingCanvas) {\r\n            return null;\r\n        }\r\n        return this.getInputElement()!.getBoundingClientRect();\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the engine is running in deterministic lock step mode\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns true if engine is in deterministic lock step mode\r\n     */\r\n    public isDeterministicLockStep(): boolean {\r\n        return this._deterministicLockstep;\r\n    }\r\n\r\n    /**\r\n     * Gets the max steps when engine is running in deterministic lock step\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/animation/advanced_animations#deterministic-lockstep\r\n     * @returns the max steps\r\n     */\r\n    public getLockstepMaxSteps(): number {\r\n        return this._lockstepMaxSteps;\r\n    }\r\n\r\n    /**\r\n     * Returns the time in ms between steps when using deterministic lock step.\r\n     * @returns time step in (ms)\r\n     */\r\n    public getTimeStep(): number {\r\n        return this._timeStep * 1000;\r\n    }\r\n\r\n    /**\r\n     * Force the mipmap generation for the given render target texture\r\n     * @param texture defines the render target texture to use\r\n     * @param unbind defines whether or not to unbind the texture after generation. Defaults to true.\r\n     */\r\n    public generateMipMapsForCubemap(texture: InternalTexture, unbind = true) {\r\n        if (texture.generateMipMaps) {\r\n            const gl = this._gl;\r\n            this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, texture, true);\r\n            gl.generateMipmap(gl.TEXTURE_CUBE_MAP);\r\n            if (unbind) {\r\n                this._bindTextureDirectly(gl.TEXTURE_CUBE_MAP, null);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** States */\r\n\r\n    /**\r\n     * Gets a boolean indicating if depth writing is enabled\r\n     * @returns the current depth writing state\r\n     */\r\n    public getDepthWrite(): boolean {\r\n        return this._depthCullingState.depthMask;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable depth writing\r\n     * @param enable defines the state to set\r\n     */\r\n    public setDepthWrite(enable: boolean): void {\r\n        this._depthCullingState.depthMask = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating if stencil buffer is enabled\r\n     * @returns the current stencil buffer state\r\n     */\r\n    public getStencilBuffer(): boolean {\r\n        return this._stencilState.stencilTest;\r\n    }\r\n\r\n    /**\r\n     * Enable or disable the stencil buffer\r\n     * @param enable defines if the stencil buffer must be enabled or disabled\r\n     */\r\n    public setStencilBuffer(enable: boolean): void {\r\n        this._stencilState.stencilTest = enable;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the new stencil mask to use\r\n     */\r\n    public getStencilMask(): number {\r\n        return this._stencilState.stencilMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilMask(mask: number): void {\r\n        this._stencilState.stencilMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil function\r\n     * @returns a number defining the stencil function to use\r\n     */\r\n    public getStencilFunction(): number {\r\n        return this._stencilState.stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil reference value\r\n     * @returns a number defining the stencil reference value to use\r\n     */\r\n    public getStencilFunctionReference(): number {\r\n        return this._stencilState.stencilFuncRef;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil mask\r\n     * @returns a number defining the stencil mask to use\r\n     */\r\n    public getStencilFunctionMask(): number {\r\n        return this._stencilState.stencilFuncMask;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil function\r\n     * @param stencilFunc defines the new stencil function to use\r\n     */\r\n    public setStencilFunction(stencilFunc: number) {\r\n        this._stencilState.stencilFunc = stencilFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil reference\r\n     * @param reference defines the new stencil reference to use\r\n     */\r\n    public setStencilFunctionReference(reference: number) {\r\n        this._stencilState.stencilFuncRef = reference;\r\n    }\r\n\r\n    /**\r\n     * Sets the current stencil mask\r\n     * @param mask defines the new stencil mask to use\r\n     */\r\n    public setStencilFunctionMask(mask: number) {\r\n        this._stencilState.stencilFuncMask = mask;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil fails\r\n     * @returns a number defining stencil operation to use when stencil fails\r\n     */\r\n    public getStencilOperationFail(): number {\r\n        return this._stencilState.stencilOpStencilFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when depth fails\r\n     * @returns a number defining stencil operation to use when depth fails\r\n     */\r\n    public getStencilOperationDepthFail(): number {\r\n        return this._stencilState.stencilOpDepthFail;\r\n    }\r\n\r\n    /**\r\n     * Gets the current stencil operation when stencil passes\r\n     * @returns a number defining stencil operation to use when stencil passes\r\n     */\r\n    public getStencilOperationPass(): number {\r\n        return this._stencilState.stencilOpStencilDepthPass;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil fails\r\n     * @param operation defines the stencil operation to use when stencil fails\r\n     */\r\n    public setStencilOperationFail(operation: number): void {\r\n        this._stencilState.stencilOpStencilFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when depth fails\r\n     * @param operation defines the stencil operation to use when depth fails\r\n     */\r\n    public setStencilOperationDepthFail(operation: number): void {\r\n        this._stencilState.stencilOpDepthFail = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets the stencil operation to use when stencil passes\r\n     * @param operation defines the stencil operation to use when stencil passes\r\n     */\r\n    public setStencilOperationPass(operation: number): void {\r\n        this._stencilState.stencilOpStencilDepthPass = operation;\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the dithering state is enabled or disabled\r\n     * @param value defines the dithering state\r\n     */\r\n    public setDitheringState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.enable(this._gl.DITHER);\r\n        } else {\r\n            this._gl.disable(this._gl.DITHER);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a boolean indicating if the rasterizer state is enabled or disabled\r\n     * @param value defines the rasterizer state\r\n     */\r\n    public setRasterizerState(value: boolean): void {\r\n        if (value) {\r\n            this._gl.disable(this._gl.RASTERIZER_DISCARD);\r\n        } else {\r\n            this._gl.enable(this._gl.RASTERIZER_DISCARD);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current depth function\r\n     * @returns a number defining the depth function\r\n     */\r\n    public getDepthFunction(): Nullable<number> {\r\n        return this._depthCullingState.depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function\r\n     * @param depthFunc defines the function to use\r\n     */\r\n    public setDepthFunction(depthFunc: number) {\r\n        this._depthCullingState.depthFunc = depthFunc;\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GREATER\r\n     */\r\n    public setDepthFunctionToGreater(): void {\r\n        this.setDepthFunction(Constants.GREATER);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to GEQUAL\r\n     */\r\n    public setDepthFunctionToGreaterOrEqual(): void {\r\n        this.setDepthFunction(Constants.GEQUAL);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LESS\r\n     */\r\n    public setDepthFunctionToLess(): void {\r\n        this.setDepthFunction(Constants.LESS);\r\n    }\r\n\r\n    /**\r\n     * Sets the current depth function to LEQUAL\r\n     */\r\n    public setDepthFunctionToLessOrEqual(): void {\r\n        this.setDepthFunction(Constants.LEQUAL);\r\n    }\r\n\r\n    private _cachedStencilBuffer: boolean;\r\n    private _cachedStencilFunction: number;\r\n    private _cachedStencilMask: number;\r\n    private _cachedStencilOperationPass: number;\r\n    private _cachedStencilOperationFail: number;\r\n    private _cachedStencilOperationDepthFail: number;\r\n    private _cachedStencilReference: number;\r\n\r\n    /**\r\n     * Caches the the state of the stencil buffer\r\n     */\r\n    public cacheStencilState() {\r\n        this._cachedStencilBuffer = this.getStencilBuffer();\r\n        this._cachedStencilFunction = this.getStencilFunction();\r\n        this._cachedStencilMask = this.getStencilMask();\r\n        this._cachedStencilOperationPass = this.getStencilOperationPass();\r\n        this._cachedStencilOperationFail = this.getStencilOperationFail();\r\n        this._cachedStencilOperationDepthFail = this.getStencilOperationDepthFail();\r\n        this._cachedStencilReference = this.getStencilFunctionReference();\r\n    }\r\n\r\n    /**\r\n     * Restores the state of the stencil buffer\r\n     */\r\n    public restoreStencilState() {\r\n        this.setStencilFunction(this._cachedStencilFunction);\r\n        this.setStencilMask(this._cachedStencilMask);\r\n        this.setStencilBuffer(this._cachedStencilBuffer);\r\n        this.setStencilOperationPass(this._cachedStencilOperationPass);\r\n        this.setStencilOperationFail(this._cachedStencilOperationFail);\r\n        this.setStencilOperationDepthFail(this._cachedStencilOperationDepthFail);\r\n        this.setStencilFunctionReference(this._cachedStencilReference);\r\n    }\r\n\r\n    /**\r\n     * Directly set the WebGL Viewport\r\n     * @param x defines the x coordinate of the viewport (in screen space)\r\n     * @param y defines the y coordinate of the viewport (in screen space)\r\n     * @param width defines the width of the viewport (in screen space)\r\n     * @param height defines the height of the viewport (in screen space)\r\n     * @returns the current viewport Object (if any) that is being replaced by this call. You can restore this viewport later on to go back to the original state\r\n     */\r\n    public setDirectViewport(x: number, y: number, width: number, height: number): Nullable<IViewportLike> {\r\n        const currentViewport = this._cachedViewport;\r\n        this._cachedViewport = null;\r\n\r\n        this._viewport(x, y, width, height);\r\n\r\n        return currentViewport;\r\n    }\r\n\r\n    /**\r\n     * Executes a scissor clear (ie. a clear on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     * @param clearColor defines the clear color\r\n     */\r\n    public scissorClear(x: number, y: number, width: number, height: number, clearColor: IColor4Like): void {\r\n        this.enableScissor(x, y, width, height);\r\n        this.clear(clearColor, true, true, true);\r\n        this.disableScissor();\r\n    }\r\n\r\n    /**\r\n     * Enable scissor test on a specific rectangle (ie. render will only be executed on a specific portion of the screen)\r\n     * @param x defines the x-coordinate of the bottom left corner of the clear rectangle\r\n     * @param y defines the y-coordinate of the corner of the clear rectangle\r\n     * @param width defines the width of the clear rectangle\r\n     * @param height defines the height of the clear rectangle\r\n     */\r\n    public enableScissor(x: number, y: number, width: number, height: number): void {\r\n        const gl = this._gl;\r\n\r\n        // Change state\r\n        gl.enable(gl.SCISSOR_TEST);\r\n        gl.scissor(x, y, width, height);\r\n    }\r\n\r\n    /**\r\n     * Disable previously set scissor test rectangle\r\n     */\r\n    public disableScissor() {\r\n        const gl = this._gl;\r\n\r\n        gl.disable(gl.SCISSOR_TEST);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _reportDrawCall(numDrawCalls = 1) {\r\n        this._drawCalls.addCount(numDrawCalls, false);\r\n    }\r\n\r\n    /**\r\n     * Initializes a webVR display and starts listening to display change events\r\n     * The onVRDisplayChangedObservable will be notified upon these changes\r\n     * @returns The onVRDisplayChangedObservable\r\n     */\r\n    public initWebVR(): Observable<IDisplayChangedEventArgs> {\r\n        throw _WarnImport(\"WebVRCamera\");\r\n    }\r\n\r\n    /** @internal */\r\n    public _prepareVRComponent() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public _connectVREvents(canvas?: HTMLCanvasElement, document?: any) {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /** @internal */\r\n    public _submitVRFrame() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n    /**\r\n     * Call this function to leave webVR mode\r\n     * Will do nothing if webVR is not supported or if there is no webVR device\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/cameras/webVRCamera\r\n     */\r\n    public disableVR() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * Gets a boolean indicating that the system is in VR mode and is presenting\r\n     * @returns true if VR mode is engaged\r\n     */\r\n    public isVRPresenting() {\r\n        return false;\r\n    }\r\n\r\n    /** @internal */\r\n    public _requestVRFrame() {\r\n        // Do nothing as the engine side effect will overload it\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _loadFileAsync(url: string, offlineProvider?: IOfflineProvider, useArrayBuffer?: boolean): Promise<string | ArrayBuffer> {\r\n        return new Promise((resolve, reject) => {\r\n            this._loadFile(\r\n                url,\r\n                (data) => {\r\n                    resolve(data);\r\n                },\r\n                undefined,\r\n                offlineProvider,\r\n                useArrayBuffer,\r\n                (request, exception) => {\r\n                    reject(exception);\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the vertex shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the vertex shader associated with the program\r\n     */\r\n    public getVertexShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[0]);\r\n    }\r\n\r\n    /**\r\n     * Gets the source code of the fragment shader associated with a specific webGL program\r\n     * @param program defines the program to use\r\n     * @returns a string containing the source code of the fragment shader associated with the program\r\n     */\r\n    public getFragmentShaderSource(program: WebGLProgram): Nullable<string> {\r\n        const shaders = this._gl.getAttachedShaders(program);\r\n\r\n        if (!shaders) {\r\n            return null;\r\n        }\r\n\r\n        return this._gl.getShaderSource(shaders[1]);\r\n    }\r\n\r\n    /**\r\n     * Sets a depth stencil texture from a render target to the according uniform.\r\n     * @param channel The texture channel\r\n     * @param uniform The uniform to set\r\n     * @param texture The render target texture containing the depth stencil texture to apply\r\n     * @param name The texture name\r\n     */\r\n    public setDepthStencilTexture(channel: number, uniform: Nullable<WebGLUniformLocation>, texture: Nullable<RenderTargetTexture>, name?: string): void {\r\n        if (channel === undefined) {\r\n            return;\r\n        }\r\n\r\n        if (uniform) {\r\n            this._boundUniforms[channel] = uniform;\r\n        }\r\n\r\n        if (!texture || !texture.depthStencilTexture) {\r\n            this._setTexture(channel, null, undefined, undefined, name);\r\n        } else {\r\n            this._setTexture(channel, texture, false, true, name);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets a texture to the webGL context from a postprocess\r\n     * @param channel defines the channel to use\r\n     * @param postProcess defines the source postprocess\r\n     * @param name name of the channel\r\n     */\r\n    public setTextureFromPostProcess(channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n        let postProcessInput = null;\r\n        if (postProcess) {\r\n            if (postProcess._forcedOutputTexture) {\r\n                postProcessInput = postProcess._forcedOutputTexture;\r\n            } else if (postProcess._textures.data[postProcess._currentRenderTextureInd]) {\r\n                postProcessInput = postProcess._textures.data[postProcess._currentRenderTextureInd];\r\n            }\r\n        }\r\n\r\n        this._bindTexture(channel, postProcessInput?.texture ?? null, name);\r\n    }\r\n\r\n    /**\r\n     * Binds the output of the passed in post process to the texture channel specified\r\n     * @param channel The channel the texture should be bound to\r\n     * @param postProcess The post process which's output should be bound\r\n     * @param name name of the channel\r\n     */\r\n    public setTextureFromPostProcessOutput(channel: number, postProcess: Nullable<PostProcess>, name: string): void {\r\n        this._bindTexture(channel, postProcess?._outputTexture?.texture ?? null, name);\r\n    }\r\n\r\n    protected _rebuildBuffers(): void {\r\n        // Index / Vertex\r\n        for (const scene of this.scenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n            scene._rebuildTextures();\r\n        }\r\n\r\n        for (const scene of this._virtualScenes) {\r\n            scene.resetCachedMaterial();\r\n            scene._rebuildGeometries();\r\n            scene._rebuildTextures();\r\n        }\r\n\r\n        super._rebuildBuffers();\r\n    }\r\n\r\n    /** @internal */\r\n    public _renderFrame() {\r\n        for (let index = 0; index < this._activeRenderLoops.length; index++) {\r\n            const renderFunction = this._activeRenderLoops[index];\r\n\r\n            renderFunction();\r\n        }\r\n    }\r\n\r\n    protected _cancelFrame() {\r\n        if (this._renderingQueueLaunched && this.customAnimationFrameRequester) {\r\n            this._renderingQueueLaunched = false;\r\n            const { cancelAnimationFrame } = this.customAnimationFrameRequester;\r\n            if (cancelAnimationFrame) {\r\n                cancelAnimationFrame(this.customAnimationFrameRequester.requestID);\r\n            }\r\n        } else {\r\n            super._cancelFrame();\r\n        }\r\n    }\r\n\r\n    public _renderLoop(): void {\r\n        if (!this._contextWasLost) {\r\n            let shouldRender = true;\r\n            if (this.isDisposed || (!this.renderEvenInBackground && this._windowIsBackground)) {\r\n                shouldRender = false;\r\n            }\r\n\r\n            if (shouldRender) {\r\n                // Start new frame\r\n                this.beginFrame();\r\n\r\n                // Child canvases\r\n                if (!this._renderViews()) {\r\n                    // Main frame\r\n                    this._renderFrame();\r\n                }\r\n\r\n                // Present\r\n                this.endFrame();\r\n            }\r\n        }\r\n\r\n        if (this._activeRenderLoops.length > 0) {\r\n            // Register new frame\r\n            if (this.customAnimationFrameRequester) {\r\n                this.customAnimationFrameRequester.requestID = this._queueNewFrame(\r\n                    this.customAnimationFrameRequester.renderFunction || this._boundRenderFunction,\r\n                    this.customAnimationFrameRequester\r\n                );\r\n                this._frameHandler = this.customAnimationFrameRequester.requestID;\r\n            } else if (this.isVRPresenting()) {\r\n                this._requestVRFrame();\r\n            } else {\r\n                this._frameHandler = this._queueNewFrame(this._boundRenderFunction, this.getHostWindow());\r\n            }\r\n        } else {\r\n            this._renderingQueueLaunched = false;\r\n        }\r\n    }\r\n\r\n    /** @internal */\r\n    public _renderViews() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Toggle full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public switchFullscreen(requestPointerLock: boolean): void {\r\n        if (this.isFullscreen) {\r\n            this.exitFullscreen();\r\n        } else {\r\n            this.enterFullscreen(requestPointerLock);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters full screen mode\r\n     * @param requestPointerLock defines if a pointer lock should be requested from the user\r\n     */\r\n    public enterFullscreen(requestPointerLock: boolean): void {\r\n        if (!this.isFullscreen) {\r\n            this._pointerLockRequested = requestPointerLock;\r\n            if (this._renderingCanvas) {\r\n                Engine._RequestFullscreen(this._renderingCanvas);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits full screen mode\r\n     */\r\n    public exitFullscreen(): void {\r\n        if (this.isFullscreen) {\r\n            Engine._ExitFullscreen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enters Pointerlock mode\r\n     */\r\n    public enterPointerlock(): void {\r\n        if (this._renderingCanvas) {\r\n            Engine._RequestPointerlock(this._renderingCanvas);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Exits Pointerlock mode\r\n     */\r\n    public exitPointerlock(): void {\r\n        Engine._ExitPointerlock();\r\n    }\r\n\r\n    /**\r\n     * Begin a new frame\r\n     */\r\n    public beginFrame(): void {\r\n        this._measureFps();\r\n\r\n        this.onBeginFrameObservable.notifyObservers(this);\r\n        super.beginFrame();\r\n    }\r\n\r\n    /**\r\n     * End the current frame\r\n     */\r\n    public endFrame(): void {\r\n        super.endFrame();\r\n        this._submitVRFrame();\r\n\r\n        this.onEndFrameObservable.notifyObservers(this);\r\n    }\r\n\r\n    /**\r\n     * Resize the view according to the canvas' size\r\n     * @param forceSetSize true to force setting the sizes of the underlying canvas\r\n     */\r\n    public resize(forceSetSize = false): void {\r\n        // We're not resizing the size of the canvas while in VR mode & presenting\r\n        if (this.isVRPresenting()) {\r\n            return;\r\n        }\r\n\r\n        super.resize(forceSetSize);\r\n    }\r\n\r\n    /**\r\n     * Force a specific size of the canvas\r\n     * @param width defines the new canvas' width\r\n     * @param height defines the new canvas' height\r\n     * @param forceSetSize true to force setting the sizes of the underlying canvas\r\n     * @returns true if the size was changed\r\n     */\r\n    public setSize(width: number, height: number, forceSetSize = false): boolean {\r\n        if (!this._renderingCanvas) {\r\n            return false;\r\n        }\r\n\r\n        if (!super.setSize(width, height, forceSetSize)) {\r\n            return false;\r\n        }\r\n\r\n        if (this.scenes) {\r\n            for (let index = 0; index < this.scenes.length; index++) {\r\n                const scene = this.scenes[index];\r\n\r\n                for (let camIndex = 0; camIndex < scene.cameras.length; camIndex++) {\r\n                    const cam = scene.cameras[camIndex];\r\n\r\n                    cam._currentRenderId = 0;\r\n                }\r\n            }\r\n\r\n            if (this.onResizeObservable.hasObservers()) {\r\n                this.onResizeObservable.notifyObservers(this);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    public _deletePipelineContext(pipelineContext: IPipelineContext): void {\r\n        const webGLPipelineContext = pipelineContext as WebGLPipelineContext;\r\n        if (webGLPipelineContext && webGLPipelineContext.program) {\r\n            if (webGLPipelineContext.transformFeedback) {\r\n                this.deleteTransformFeedback(webGLPipelineContext.transformFeedback);\r\n                webGLPipelineContext.transformFeedback = null;\r\n            }\r\n        }\r\n        super._deletePipelineContext(pipelineContext);\r\n    }\r\n\r\n    public createShaderProgram(\r\n        pipelineContext: IPipelineContext,\r\n        vertexCode: string,\r\n        fragmentCode: string,\r\n        defines: Nullable<string>,\r\n        context?: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        context = context || this._gl;\r\n\r\n        this.onBeforeShaderCompilationObservable.notifyObservers(this);\r\n\r\n        const program = super.createShaderProgram(pipelineContext, vertexCode, fragmentCode, defines, context, transformFeedbackVaryings);\r\n        this.onAfterShaderCompilationObservable.notifyObservers(this);\r\n\r\n        return program;\r\n    }\r\n\r\n    protected _createShaderProgram(\r\n        pipelineContext: WebGLPipelineContext,\r\n        vertexShader: WebGLShader,\r\n        fragmentShader: WebGLShader,\r\n        context: WebGLRenderingContext,\r\n        transformFeedbackVaryings: Nullable<string[]> = null\r\n    ): WebGLProgram {\r\n        const shaderProgram = context.createProgram();\r\n        pipelineContext.program = shaderProgram;\r\n\r\n        if (!shaderProgram) {\r\n            throw new Error(\"Unable to create program\");\r\n        }\r\n\r\n        context.attachShader(shaderProgram, vertexShader);\r\n        context.attachShader(shaderProgram, fragmentShader);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            const transformFeedback = this.createTransformFeedback();\r\n\r\n            this.bindTransformFeedback(transformFeedback);\r\n            this.setTranformFeedbackVaryings(shaderProgram, transformFeedbackVaryings);\r\n            pipelineContext.transformFeedback = transformFeedback;\r\n        }\r\n\r\n        context.linkProgram(shaderProgram);\r\n\r\n        if (this.webGLVersion > 1 && transformFeedbackVaryings) {\r\n            this.bindTransformFeedback(null);\r\n        }\r\n\r\n        pipelineContext.context = context;\r\n        pipelineContext.vertexShader = vertexShader;\r\n        pipelineContext.fragmentShader = fragmentShader;\r\n\r\n        if (!pipelineContext.isParallelCompiled) {\r\n            this._finalizePipelineContext(pipelineContext);\r\n        }\r\n\r\n        return shaderProgram;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseTexture(texture: InternalTexture): void {\r\n        super._releaseTexture(texture);\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _releaseRenderTargetWrapper(rtWrapper: RenderTargetWrapper): void {\r\n        super._releaseRenderTargetWrapper(rtWrapper);\r\n\r\n        // Set output texture of post process to null if the framebuffer has been released/disposed\r\n        this.scenes.forEach((scene) => {\r\n            scene.postProcesses.forEach((postProcess) => {\r\n                if (postProcess._outputTexture === rtWrapper) {\r\n                    postProcess._outputTexture = null;\r\n                }\r\n            });\r\n            scene.cameras.forEach((camera) => {\r\n                camera._postProcesses.forEach((postProcess) => {\r\n                    if (postProcess) {\r\n                        if (postProcess._outputTexture === rtWrapper) {\r\n                            postProcess._outputTexture = null;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    protected static _RenderPassIdCounter = 0;\r\n    /**\r\n     * Gets or sets the current render pass id\r\n     */\r\n    public currentRenderPassId = Constants.RENDERPASS_MAIN;\r\n\r\n    private _renderPassNames: string[] = [\"main\"];\r\n    /**\r\n     * Gets the names of the render passes that are currently created\r\n     * @returns list of the render pass names\r\n     */\r\n    public getRenderPassNames(): string[] {\r\n        return this._renderPassNames;\r\n    }\r\n\r\n    /**\r\n     * Gets the name of the current render pass\r\n     * @returns name of the current render pass\r\n     */\r\n    public getCurrentRenderPassName(): string {\r\n        return this._renderPassNames[this.currentRenderPassId];\r\n    }\r\n\r\n    /**\r\n     * Creates a render pass id\r\n     * @param name Name of the render pass (for debug purpose only)\r\n     * @returns the id of the new render pass\r\n     */\r\n    public createRenderPassId(name?: string) {\r\n        // Note: render pass id == 0 is always for the main render pass\r\n        const id = ++Engine._RenderPassIdCounter;\r\n        this._renderPassNames[id] = name ?? \"NONAME\";\r\n        return id;\r\n    }\r\n\r\n    /**\r\n     * Releases a render pass id\r\n     * @param id id of the render pass to release\r\n     */\r\n    public releaseRenderPassId(id: number): void {\r\n        this._renderPassNames[id] = undefined as any;\r\n\r\n        for (let s = 0; s < this.scenes.length; ++s) {\r\n            const scene = this.scenes[s];\r\n            for (let m = 0; m < scene.meshes.length; ++m) {\r\n                const mesh = scene.meshes[m];\r\n                if (mesh.subMeshes) {\r\n                    for (let b = 0; b < mesh.subMeshes.length; ++b) {\r\n                        const subMesh = mesh.subMeshes[b];\r\n                        subMesh._removeDrawWrapper(id);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     * Rescales a texture\r\n     * @param source input texture\r\n     * @param destination destination texture\r\n     * @param scene scene to use to render the resize\r\n     * @param internalFormat format to use when resizing\r\n     * @param onComplete callback to be called when resize has completed\r\n     */\r\n    public _rescaleTexture(source: InternalTexture, destination: InternalTexture, scene: Nullable<any>, internalFormat: number, onComplete: () => void): void {\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_S, this._gl.CLAMP_TO_EDGE);\r\n        this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_WRAP_T, this._gl.CLAMP_TO_EDGE);\r\n\r\n        const rtt = this.createRenderTargetTexture(\r\n            {\r\n                width: destination.width,\r\n                height: destination.height,\r\n            },\r\n            {\r\n                generateMipMaps: false,\r\n                type: Constants.TEXTURETYPE_UNSIGNED_INT,\r\n                samplingMode: Constants.TEXTURE_BILINEAR_SAMPLINGMODE,\r\n                generateDepthBuffer: false,\r\n                generateStencilBuffer: false,\r\n            }\r\n        );\r\n\r\n        if (!this._rescalePostProcess && Engine._RescalePostProcessFactory) {\r\n            this._rescalePostProcess = Engine._RescalePostProcessFactory(this);\r\n        }\r\n\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.externalTextureSamplerBinding = true;\r\n            this._rescalePostProcess.getEffect().executeWhenCompiled(() => {\r\n                this._rescalePostProcess!.onApply = function (effect) {\r\n                    effect._bindTexture(\"textureSampler\", source);\r\n                };\r\n\r\n                let hostingScene: Scene = scene;\r\n\r\n                if (!hostingScene) {\r\n                    hostingScene = this.scenes[this.scenes.length - 1];\r\n                }\r\n                hostingScene.postProcessManager.directRender([this._rescalePostProcess!], rtt, true);\r\n\r\n                this._bindTextureDirectly(this._gl.TEXTURE_2D, destination, true);\r\n                this._gl.copyTexImage2D(this._gl.TEXTURE_2D, 0, internalFormat, 0, 0, destination.width, destination.height, 0);\r\n\r\n                this.unBindFramebuffer(rtt);\r\n                rtt.dispose();\r\n\r\n                if (onComplete) {\r\n                    onComplete();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    // FPS\r\n\r\n    /**\r\n     * Gets the current framerate\r\n     * @returns a number representing the framerate\r\n     */\r\n    public getFps(): number {\r\n        return this._fps;\r\n    }\r\n\r\n    /**\r\n     * Gets the time spent between current and previous frame\r\n     * @returns a number representing the delta time in ms\r\n     */\r\n    public getDeltaTime(): number {\r\n        return this._deltaTime;\r\n    }\r\n\r\n    private _measureFps(): void {\r\n        this._performanceMonitor.sampleFrame();\r\n        this._fps = this._performanceMonitor.averageFPS;\r\n        this._deltaTime = this._performanceMonitor.instantaneousFrameTime || 0;\r\n    }\r\n\r\n    /**\r\n     * Wraps an external web gl texture in a Babylon texture.\r\n     * @param texture defines the external texture\r\n     * @param hasMipMaps defines whether the external texture has mip maps (default: false)\r\n     * @param samplingMode defines the sampling mode for the external texture (default: Constants.TEXTURE_TRILINEAR_SAMPLINGMODE)\r\n     * @returns the babylon internal texture\r\n     */\r\n    public wrapWebGLTexture(texture: WebGLTexture, hasMipMaps: boolean = false, samplingMode: number = Constants.TEXTURE_TRILINEAR_SAMPLINGMODE): InternalTexture {\r\n        const hardwareTexture = new WebGLHardwareTexture(texture, this._gl);\r\n        const internalTexture = new InternalTexture(this, InternalTextureSource.Unknown, true);\r\n        internalTexture._hardwareTexture = hardwareTexture;\r\n        internalTexture.isReady = true;\r\n        internalTexture.useMipMaps = hasMipMaps;\r\n        this.updateTextureSamplingMode(samplingMode, internalTexture);\r\n        return internalTexture;\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _uploadImageToTexture(texture: InternalTexture, image: HTMLImageElement | ImageBitmap, faceIndex: number = 0, lod: number = 0) {\r\n        const gl = this._gl;\r\n\r\n        const textureType = this._getWebGLTextureType(texture.type);\r\n        const format = this._getInternalFormat(texture.format);\r\n        const internalFormat = this._getRGBABufferInternalSizedFormat(texture.type, format);\r\n\r\n        const bindTarget = texture.isCube ? gl.TEXTURE_CUBE_MAP : gl.TEXTURE_2D;\r\n\r\n        this._bindTextureDirectly(bindTarget, texture, true);\r\n        this._unpackFlipY(texture.invertY);\r\n\r\n        let target: GLenum = gl.TEXTURE_2D;\r\n        if (texture.isCube) {\r\n            target = gl.TEXTURE_CUBE_MAP_POSITIVE_X + faceIndex;\r\n        }\r\n\r\n        gl.texImage2D(target, lod, internalFormat, format, textureType, image);\r\n        this._bindTextureDirectly(bindTarget, null, true);\r\n    }\r\n\r\n    /**\r\n     * Updates a depth texture Comparison Mode and Function.\r\n     * If the comparison Function is equal to 0, the mode will be set to none.\r\n     * Otherwise, this only works in webgl 2 and requires a shadow sampler in the shader.\r\n     * @param texture The texture to set the comparison function for\r\n     * @param comparisonFunction The comparison function to set, 0 if no comparison required\r\n     */\r\n    public updateTextureComparisonFunction(texture: InternalTexture, comparisonFunction: number): void {\r\n        if (this.webGLVersion === 1) {\r\n            Logger.Error(\"WebGL 1 does not support texture comparison.\");\r\n            return;\r\n        }\r\n\r\n        const gl = this._gl;\r\n\r\n        if (texture.isCube) {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_CUBE_MAP, null);\r\n        } else {\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, texture, true);\r\n\r\n            if (comparisonFunction === 0) {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, Constants.LEQUAL);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.NONE);\r\n            } else {\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_FUNC, comparisonFunction);\r\n                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);\r\n            }\r\n\r\n            this._bindTextureDirectly(this._gl.TEXTURE_2D, null);\r\n        }\r\n\r\n        texture._comparisonFunction = comparisonFunction;\r\n    }\r\n\r\n    /**\r\n     * Creates a webGL buffer to use with instantiation\r\n     * @param capacity defines the size of the buffer\r\n     * @returns the webGL buffer\r\n     */\r\n    public createInstancesBuffer(capacity: number): DataBuffer {\r\n        const buffer = this._gl.createBuffer();\r\n\r\n        if (!buffer) {\r\n            throw new Error(\"Unable to create instance buffer\");\r\n        }\r\n\r\n        const result = new WebGLDataBuffer(buffer);\r\n        result.capacity = capacity;\r\n\r\n        this.bindArrayBuffer(result);\r\n        this._gl.bufferData(this._gl.ARRAY_BUFFER, capacity, this._gl.DYNAMIC_DRAW);\r\n\r\n        result.references = 1;\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Delete a webGL buffer used with instantiation\r\n     * @param buffer defines the webGL buffer to delete\r\n     */\r\n    public deleteInstancesBuffer(buffer: WebGLBuffer): void {\r\n        this._gl.deleteBuffer(buffer);\r\n    }\r\n\r\n    private _clientWaitAsync(sync: WebGLSync, flags = 0, intervalms = 10): Promise<void> {\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        return new Promise((resolve, reject) => {\r\n            const check = () => {\r\n                const res = gl.clientWaitSync(sync, flags, 0);\r\n                if (res == gl.WAIT_FAILED) {\r\n                    reject();\r\n                    return;\r\n                }\r\n                if (res == gl.TIMEOUT_EXPIRED) {\r\n                    setTimeout(check, intervalms);\r\n                    return;\r\n                }\r\n                resolve();\r\n            };\r\n\r\n            check();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @internal\r\n     */\r\n    public _readPixelsAsync(x: number, y: number, w: number, h: number, format: number, type: number, outputBuffer: ArrayBufferView) {\r\n        if (this._webGLVersion < 2) {\r\n            throw new Error(\"_readPixelsAsync only work on WebGL2+\");\r\n        }\r\n\r\n        const gl = <WebGL2RenderingContext>(this._gl as any);\r\n        const buf = gl.createBuffer();\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n        gl.bufferData(gl.PIXEL_PACK_BUFFER, outputBuffer.byteLength, gl.STREAM_READ);\r\n        gl.readPixels(x, y, w, h, format, type, 0);\r\n        gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n\r\n        const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\r\n        if (!sync) {\r\n            return null;\r\n        }\r\n\r\n        gl.flush();\r\n\r\n        return this._clientWaitAsync(sync, 0, 10).then(() => {\r\n            gl.deleteSync(sync);\r\n\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buf);\r\n            gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, outputBuffer);\r\n            gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);\r\n            gl.deleteBuffer(buf);\r\n\r\n            return outputBuffer;\r\n        });\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.hideLoadingUI();\r\n\r\n        this.onNewSceneAddedObservable.clear();\r\n\r\n        // Release postProcesses\r\n        while (this.postProcesses.length) {\r\n            this.postProcesses[0].dispose();\r\n        }\r\n\r\n        // Rescale PP\r\n        if (this._rescalePostProcess) {\r\n            this._rescalePostProcess.dispose();\r\n        }\r\n\r\n        // Release scenes\r\n        while (this.scenes.length) {\r\n            this.scenes[0].dispose();\r\n        }\r\n\r\n        while (this._virtualScenes.length) {\r\n            this._virtualScenes[0].dispose();\r\n        }\r\n\r\n        // Release audio engine\r\n        if (EngineStore.Instances.length === 1 && Engine.audioEngine) {\r\n            Engine.audioEngine.dispose();\r\n            Engine.audioEngine = null;\r\n        }\r\n\r\n        //WebVR\r\n        this.disableVR();\r\n\r\n        // Events\r\n        const hostWindow = this.getHostWindow(); // it calls IsWindowObjectExist()\r\n        if (hostWindow && typeof hostWindow.removeEventListener === \"function\") {\r\n            hostWindow.removeEventListener(\"blur\", this._onBlur);\r\n            hostWindow.removeEventListener(\"focus\", this._onFocus);\r\n        }\r\n\r\n        if (this._renderingCanvas) {\r\n            this._renderingCanvas.removeEventListener(\"focus\", this._onCanvasFocus);\r\n            this._renderingCanvas.removeEventListener(\"blur\", this._onCanvasBlur);\r\n            this._renderingCanvas.removeEventListener(\"pointerout\", this._onCanvasPointerOut);\r\n            this._renderingCanvas.removeEventListener(\"contextmenu\", this._onCanvasContextMenu);\r\n        }\r\n\r\n        if (IsDocumentAvailable()) {\r\n            document.removeEventListener(\"fullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"mozfullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"webkitfullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"msfullscreenchange\", this._onFullscreenChange);\r\n            document.removeEventListener(\"pointerlockchange\", this._onPointerLockChange);\r\n            document.removeEventListener(\"mspointerlockchange\", this._onPointerLockChange);\r\n            document.removeEventListener(\"mozpointerlockchange\", this._onPointerLockChange);\r\n            document.removeEventListener(\"webkitpointerlockchange\", this._onPointerLockChange);\r\n        }\r\n\r\n        super.dispose();\r\n\r\n        // Remove from Instances\r\n        const index = EngineStore.Instances.indexOf(this);\r\n\r\n        if (index >= 0) {\r\n            EngineStore.Instances.splice(index, 1);\r\n        }\r\n\r\n        // no more engines left in the engine store? Notify!\r\n        if (!Engine.Instances.length) {\r\n            EngineStore.OnEnginesDisposedObservable.notifyObservers(this);\r\n        }\r\n\r\n        // Observables\r\n        this.onResizeObservable.clear();\r\n        this.onCanvasBlurObservable.clear();\r\n        this.onCanvasFocusObservable.clear();\r\n        this.onCanvasPointerOutObservable.clear();\r\n        this.onBeginFrameObservable.clear();\r\n        this.onEndFrameObservable.clear();\r\n    }\r\n\r\n    private _disableTouchAction(): void {\r\n        if (!this._renderingCanvas || !this._renderingCanvas.setAttribute) {\r\n            return;\r\n        }\r\n\r\n        this._renderingCanvas.setAttribute(\"touch-action\", \"none\");\r\n        this._renderingCanvas.style.touchAction = \"none\";\r\n        (this._renderingCanvas.style as any).webkitTapHighlightColor = \"transparent\";\r\n    }\r\n\r\n    // Loading screen\r\n\r\n    /**\r\n     * Display the loading screen\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public displayLoadingUI(): void {\r\n        if (!IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this.loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.displayLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide the loading screen\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public hideLoadingUI(): void {\r\n        if (!IsWindowObjectExist()) {\r\n            return;\r\n        }\r\n        const loadingScreen = this._loadingScreen;\r\n        if (loadingScreen) {\r\n            loadingScreen.hideLoadingUI();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the current loading screen object\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public get loadingScreen(): ILoadingScreen {\r\n        if (!this._loadingScreen && this._renderingCanvas) {\r\n            this._loadingScreen = Engine.DefaultLoadingScreenFactory(this._renderingCanvas);\r\n        }\r\n        return this._loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen object\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public set loadingScreen(loadingScreen: ILoadingScreen) {\r\n        this._loadingScreen = loadingScreen;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen text\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public set loadingUIText(text: string) {\r\n        this.loadingScreen.loadingUIText = text;\r\n    }\r\n\r\n    /**\r\n     * Sets the current loading screen background color\r\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/scene/customLoadingScreen\r\n     */\r\n    public set loadingUIBackgroundColor(color: string) {\r\n        this.loadingScreen.loadingUIBackgroundColor = color;\r\n    }\r\n\r\n    /**\r\n     * creates and returns a new video element\r\n     * @param constraints video constraints\r\n     * @returns video element\r\n     */\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    public createVideoElement(constraints: MediaTrackConstraints): any {\r\n        return document.createElement(\"video\");\r\n    }\r\n\r\n    /** Pointerlock and fullscreen */\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to pointerlock mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestPointerlock(element: HTMLElement): void {\r\n        if (element.requestPointerLock) {\r\n            // In some browsers, requestPointerLock returns a promise.\r\n            // Handle possible rejections to avoid an unhandled top-level exception.\r\n            const promise: unknown = element.requestPointerLock();\r\n            if (promise instanceof Promise)\r\n                promise\r\n                    .then(() => {\r\n                        element.focus();\r\n                    })\r\n                    .catch(() => {});\r\n            else element.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit pointerlock mode\r\n     */\r\n    static _ExitPointerlock(): void {\r\n        if (document.exitPointerLock) {\r\n            document.exitPointerLock();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Ask the browser to promote the current element to fullscreen rendering mode\r\n     * @param element defines the DOM element to promote\r\n     */\r\n    static _RequestFullscreen(element: HTMLElement): void {\r\n        const requestFunction = element.requestFullscreen || (<any>element).webkitRequestFullscreen;\r\n        if (!requestFunction) {\r\n            return;\r\n        }\r\n        requestFunction.call(element);\r\n    }\r\n\r\n    /**\r\n     * Asks the browser to exit fullscreen mode\r\n     */\r\n    static _ExitFullscreen(): void {\r\n        const anyDoc = document as any;\r\n\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        } else if (anyDoc.webkitCancelFullScreen) {\r\n            anyDoc.webkitCancelFullScreen();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Font size information\r\n     * @param font font name\r\n     * @returns an object containing ascent, height and descent\r\n     */\r\n    public getFontOffset(font: string): { ascent: number; height: number; descent: number } {\r\n        const text = document.createElement(\"span\");\r\n        text.innerHTML = \"Hg\";\r\n        text.setAttribute(\"style\", `font: ${font} !important`);\r\n\r\n        const block = document.createElement(\"div\");\r\n        block.style.display = \"inline-block\";\r\n        block.style.width = \"1px\";\r\n        block.style.height = \"0px\";\r\n        block.style.verticalAlign = \"bottom\";\r\n\r\n        const div = document.createElement(\"div\");\r\n        div.style.whiteSpace = \"nowrap\";\r\n        div.appendChild(text);\r\n        div.appendChild(block);\r\n\r\n        document.body.appendChild(div);\r\n\r\n        let fontAscent = 0;\r\n        let fontHeight = 0;\r\n        try {\r\n            fontHeight = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n            block.style.verticalAlign = \"baseline\";\r\n            fontAscent = block.getBoundingClientRect().top - text.getBoundingClientRect().top;\r\n        } finally {\r\n            document.body.removeChild(div);\r\n        }\r\n        return { ascent: fontAscent, height: fontHeight, descent: fontHeight - fontAscent };\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["buffer", "document"]
}
