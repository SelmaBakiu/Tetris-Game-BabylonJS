import { FlowGraphConnection, FlowGraphConnectionType } from "./flowGraphConnection.js";
/**
 * @experimental
 * Represents a connection point for data.
 * An unconnected input point can have a default value.
 * An output point will only have a value if it is connected to an input point. Furthermore,
 * if the point belongs to a "function" node, the node will run its function to update the value.
 */
export class FlowGraphDataConnection extends FlowGraphConnection {
    constructor(name, connectionType, ownerBlock, _valueType) {
        super(name, connectionType, ownerBlock);
        this._valueType = _valueType;
        this._value = this._valueType.defaultValueBuilder();
    }
    /**
     * An output data block can connect to multiple input data blocks,
     * but an input data block can only connect to one output data block.
     */
    _isSingularConnection() {
        return this.connectionType === FlowGraphConnectionType.Input;
    }
    set value(value) {
        this._value = value;
    }
    getValue(context) {
        if (this.connectionType === FlowGraphConnectionType.Output) {
            this._ownerBlock._updateOutputs(context);
            return this._value;
        }
        if (!this.isConnected()) {
            return this._value;
        }
        else {
            return this._connectedPoint[0].getValue(context);
        }
    }
}
//# sourceMappingURL=flowGraphDataConnection.js.map