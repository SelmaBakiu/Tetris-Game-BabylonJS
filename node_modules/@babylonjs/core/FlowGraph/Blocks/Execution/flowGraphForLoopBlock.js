import { FlowGraphWithOnDoneExecutionBlock } from "../../flowGraphWithOnDoneExecutionBlock.js";
import { RichTypeNumber } from "../../flowGraphRichTypes.js";
/**
 * @experimental
 * Block that executes an action in a loop.
 */
export class FlowGraphForLoopBlock extends FlowGraphWithOnDoneExecutionBlock {
    constructor() {
        super();
        this.startIndex = this._registerDataInput("startIndex", RichTypeNumber);
        this.endIndex = this._registerDataInput("endIndex", RichTypeNumber);
        this.step = this._registerDataInput("step", RichTypeNumber);
        this.step.value = 1;
        this.index = this._registerDataOutput("index", RichTypeNumber);
        this.onLoop = this._registerSignalOutput("onLoop");
        this.onDone = this._registerSignalOutput("onDone");
    }
    _executeLoop(context) {
        let index = context._getExecutionVariable(this, "index");
        const endIndex = context._getExecutionVariable(this, "endIndex");
        if (index < endIndex) {
            this.index.value = index;
            this.onLoop._activateSignal(context);
            const step = context._getExecutionVariable(this, "step");
            index += step;
            context._setExecutionVariable(this, "index", index);
            this._executeLoop(context);
        }
        else {
            this.onDone._activateSignal(context);
        }
    }
    /**
     * @internal
     */
    _execute(context) {
        const index = this.startIndex.getValue(context);
        const endIndex = this.endIndex.getValue(context);
        const step = this.step.getValue(context);
        context._setExecutionVariable(this, "index", index);
        context._setExecutionVariable(this, "endIndex", endIndex);
        context._setExecutionVariable(this, "step", step);
        this._executeLoop(context);
    }
}
//# sourceMappingURL=flowGraphForLoopBlock.js.map